<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS-Drawer</title>
      <link href="/2020/02/27/js-drawer/"/>
      <url>/2020/02/27/js-drawer/</url>
      
        <content type="html"><![CDATA[<p>Javascript drawer tool, use to draw something and animate it.</p><p>If you like it, <strong><a href="https://github.com/renhongl/js-drawer" target="_blank" rel="noopener">STAR</a></strong> it please :)</p><p>Online demo: <a href="https://renhongl.github.io/source/drawer/">Demo</a></p><p>Source code: <a href="https://github.com/renhongl/js-drawer" target="_blank" rel="noopener">Code</a></p><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ul><li><code>npm install --save js-drawer</code></li></ul><h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Drawer <span class="keyword">from</span> <span class="string">'js-drawer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> drawer = <span class="keyword">new</span> Drawer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.body,</span><br><span class="line">    width: <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">    height: <span class="built_in">document</span>.body.clientHeight,</span><br><span class="line">    loop: <span class="number">3000</span>,</span><br><span class="line">    size: <span class="number">1</span>,</span><br><span class="line">    speed: <span class="number">20</span>,</span><br><span class="line">    color: <span class="string">'#000000'</span>,</span><br><span class="line">    toolBar: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">drawer.setColor(<span class="string">'red'</span>);</span><br><span class="line">drawer.setSize(<span class="string">'20'</span>);</span><br><span class="line">drawer.setState(<span class="string">'pencil'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    drawer.animate();</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h2 id="Drawer-configuration"><a href="#Drawer-configuration" class="headerlink" title="Drawer configuration"></a>Drawer configuration</h2><table><thead><tr><th>Name</th><th>Type</th><th>Desc</th><th>Default</th><th>Required</th></tr></thead><tbody><tr><td>container</td><td>DOM Object</td><td>DOM element</td><td>body</td><td>false</td></tr><tr><td>width</td><td>Number</td><td>Canvas width</td><td>400</td><td>false</td></tr><tr><td>height</td><td>Number</td><td>Canvas height</td><td>400</td><td>false</td></tr><tr><td>size</td><td>Number</td><td>Stroke size</td><td>1</td><td>false</td></tr><tr><td>color</td><td>String</td><td>Stroke color</td><td>#000000</td><td>false</td></tr><tr><td>speed</td><td>Number</td><td>Animation speed</td><td>20</td><td>false</td></tr><tr><td>loop</td><td>Number</td><td>Animation next loop waiting time</td><td>3000</td><td>false</td></tr></tbody></table><h2 id="Drawer-API"><a href="#Drawer-API" class="headerlink" title="Drawer API"></a>Drawer API</h2><table><thead><tr><th>Name</th><th>Type</th><th>Desc</th><th>Parameter</th><th>Param Example</th></tr></thead><tbody><tr><td>setColor</td><td>Function</td><td>Set stroke color before draw next line</td><td>color&lt;String&gt;</td><td>#fff</td></tr><tr><td>setSize</td><td>Function</td><td>Set stroke size before draw next line</td><td>size&lt;Number&gt;</td><td>20</td></tr><tr><td>setState</td><td>Function</td><td>Set stroke state before draw next line</td><td>state&lt;String&gt;</td><td>pen / pencil / rect</td></tr><tr><td>animate</td><td>Function</td><td>Make animation use exsiting graph</td><td></td><td></td></tr></tbody></table><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 作品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年学习计划</title>
      <link href="/2020/01/16/2020-plan/"/>
      <url>/2020/01/16/2020-plan/</url>
      
        <content type="html"><![CDATA[<h2 id="编程必备知识课程"><a href="#编程必备知识课程" class="headerlink" title="编程必备知识课程"></a>编程必备知识课程</h2><p><input type="checkbox" disabled> 计算机组成原理</p><p><input type="checkbox" disabled> 操作系统</p><p><input type="checkbox" disabled> 计算机网络</p><p><input type="checkbox" disabled> 项目实战</p><h2 id="Typescript课程"><a href="#Typescript课程" class="headerlink" title="Typescript课程"></a>Typescript课程</h2><p><input type="checkbox" disabled checked> 课程学完</p><p><input type="checkbox" disabled> 深入Proxy和Reflect</p><p><input type="checkbox" disabled> 使用typescript练习爬虫，完善data-manager系统</p><h2 id="设计模式课程"><a href="#设计模式课程" class="headerlink" title="设计模式课程"></a>设计模式课程</h2><p><input type="checkbox" disabled> 设计模式</p><h2 id="ES6-ES11课程"><a href="#ES6-ES11课程" class="headerlink" title="ES6-ES11课程"></a>ES6-ES11课程</h2><p><input type="checkbox" disabled> ES6-ES11</p><h2 id="力扣100"><a href="#力扣100" class="headerlink" title="力扣100"></a>力扣100</h2><h2 id="Rxjs"><a href="#Rxjs" class="headerlink" title="Rxjs"></a>Rxjs</h2><h2 id="Angular-10"><a href="#Angular-10" class="headerlink" title="Angular 10"></a>Angular 10</h2><h2 id="Blender"><a href="#Blender" class="headerlink" title="Blender"></a>Blender</h2><h2 id="Figma"><a href="#Figma" class="headerlink" title="Figma"></a>Figma</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hook深入浅出</title>
      <link href="/2019/12/27/react-hook-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
      <url>/2019/12/27/react-hook-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Hooks"><a href="#什么是Hooks" class="headerlink" title="什么是Hooks"></a>什么是Hooks</h2><p>Hooks是一堆函数，让你能够在函数组件中使用React的状态和生命周期功能。</p><p>Hooks是React 16.8新加的功能。</p><a id="more"></a><p>开始前，需要注意以下几点：</p><ul><li>Hooks不是必须学习和使用的</li><li>Hooks100%向后兼容</li><li>React不会移除类组件</li><li>Hooks不会替代你所知的关于React的概念</li><li>React提供了一些内建的Hooks，并且允许创建自己的Hooks</li></ul><h2 id="为什么需要Hooks"><a href="#为什么需要Hooks" class="headerlink" title="为什么需要Hooks"></a>为什么需要Hooks</h2><ul><li>组件之间难以重用状态逻辑</li><li>复杂的组件变得难以理解</li><li>类会迷惑机器和开发人员</li></ul><h2 id="什么时候使用Hook"><a href="#什么时候使用Hook" class="headerlink" title="什么时候使用Hook"></a>什么时候使用Hook</h2><p>当你写了一个函数组件，然后你认为你需要添加一些State，之前你不得不把它改成类组件。现在，你在现有的函数组件中通过使用Hook就可以完成该功能。</p><h2 id="使用State-Hook"><a href="#使用State-Hook" class="headerlink" title="使用State Hook"></a>使用State Hook</h2><p>State Hook让你可以在函数组件中定义和使用State。</p><p>声明状态变量和设置状态的函数：<code>const [count, setCount] = useState(0)</code>。</p><p><code>count</code>是新添加的State，<code>setCount</code>是用来设置新State的函数，<code>0</code>代表State的默认值。</p><p>下面来看一个完整例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Declare a new state variable, which we'll call "count"</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="使用Effect-Hook"><a href="#使用Effect-Hook" class="headerlink" title="使用Effect Hook"></a>使用Effect Hook</h2><p>Effect Hook让你可以在函数组件中使用类似生命周期函数的功能（例如：componentDidMount）。</p><h3 id="componentDidUpdate："><a href="#componentDidUpdate：" class="headerlink" title="componentDidUpdate："></a><code>componentDidUpdate</code>：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Update the document title using the browser API</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="componentDidMount和componentWillUnmount："><a href="#componentDidMount和componentWillUnmount：" class="headerlink" title="componentDidMount和componentWillUnmount："></a><code>componentDidMount</code>和<code>componentWillUnmount</code>：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">      setIsOnline(status.isOnline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    <span class="comment">// Specify how to clean up after this effect:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Loading...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">'Online'</span> : <span class="string">'Offline'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提升性能，只在关心的变量更新时执行："><a href="#提升性能，只在关心的变量更新时执行：" class="headerlink" title="提升性能，只在关心的变量更新时执行："></a>提升性能，只在关心的变量更新时执行：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Update the document title using the browser API</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="只在组件挂载时执行一次，更新状态不执行。类似componentDidMount："><a href="#只在组件挂载时执行一次，更新状态不执行。类似componentDidMount：" class="headerlink" title="只在组件挂载时执行一次，更新状态不执行。类似componentDidMount："></a>只在组件挂载时执行一次，更新状态不执行。类似<code>componentDidMount</code>：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Component Did Mount"</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="创建自己的Hooks"><a href="#创建自己的Hooks" class="headerlink" title="创建自己的Hooks"></a>创建自己的Hooks</h2><p>创建自己的Hooks，让你将组件逻辑提取成可重用的函数。</p><ul><li>一个自定义的Hook，是一个JavaScript函数，并且名字是使用<code>use</code>开头。</li></ul><h3 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFriendStatus</span>(<span class="params">friendID</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">      setIsOnline(status.isOnline);</span><br><span class="line">    &#125;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用自定义的Hook"><a href="#使用自定义的Hook" class="headerlink" title="使用自定义的Hook"></a>使用自定义的Hook</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Loading...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">'Online'</span> : <span class="string">'Offline'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li style=&#123;&#123; <span class="attr">color</span>: isOnline ? <span class="string">'green'</span> : <span class="string">'black'</span> &#125;&#125;&gt;</span><br><span class="line">      &#123;props.friend.name&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="使用Hooks的规则"><a href="#使用Hooks的规则" class="headerlink" title="使用Hooks的规则"></a>使用Hooks的规则</h2><ul><li>只在最高层使用Hooks， 不在循环，判断或者嵌套函数中使用。</li><li>只在React函数组件中使用Hooks，不要在普通的JavaScript函数中使用。</li></ul><h2 id="内建的Hooks"><a href="#内建的Hooks" class="headerlink" title="内建的Hooks"></a>内建的Hooks</h2><p>基本的Hooks: <code>useState</code>， <code>useEffect</code>， <code>useContext</code>。<br>额外的Hooks: <code>useReducer</code>， <code>useCallback</code>， <code>useMemo</code>等等。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://reactjs.org" target="_blank" rel="noopener">React官方文档</a><br><a href="https://reactjs.org/docs/hooks-reference.html" target="_blank" rel="noopener">Hooks API Reference</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Online</title>
      <link href="/2019/11/26/code-online/"/>
      <url>/2019/11/26/code-online/</url>
      
        <content type="html"><![CDATA[<p><img width="100%" src="https://renhongl.github.io/code-online/assets/images/v1.png" alt="example1"></p><a id="more"></a><p><img width="100%" src="https://renhongl.github.io/code-online/assets/images/v2.png" alt="example2"></p><h1 id="JS在线编辑器"><a href="#JS在线编辑器" class="headerlink" title="JS在线编辑器"></a>JS在线编辑器</h1><p>是一个Javascript在线编辑器。</p><p>是一个完全由前端语言Angular开发的编辑器， 没有服务器端。</p><p>在线演示: <a href="https://renhongl.github.io/code-online#/">Demo</a></p><p>源码地址: <a href="https://github.com/renhongl/code-online" target="_blank" rel="noopener">GitHub</a></p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ul><li><a href="https://github.com/renhongl/code-online" target="_blank" rel="noopener">简体中文</a></li><li><a href="https://github.com/renhongl/code-online/blob/master/docs/english.md" target="_blank" rel="noopener">English</a></li></ul><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><ul><li>支持切换编辑器视角区域</li><li>支持全屏预览，并且实时更新</li><li>支持导出整个页面源代码</li></ul><p>你也可以:</p><ul><li>添加JS或者CSS库来创作更丰富的应用</li><li>在Babel环境中使用更新的ES语法</li></ul><h1 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h1><p>编辑器使用了如下一些技术：</p><ul><li><a href="">Angular</a> - 网页增强库</li><li><a href="">CodeMirror</a> - 多才多艺的文本编辑器</li><li><a href="">GitPages</a> - 代码保存与部署</li><li><a href="">Travis</a> - 自动测试与部署</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>编辑器需要 <a href="">Node.js</a> v8+ 去运行.</p><ul><li>安装依赖: <code>npm install</code></li><li>打包应用: <code>npm run build</code></li></ul><h1 id="正在实现的列表"><a href="#正在实现的列表" class="headerlink" title="正在实现的列表"></a>正在实现的列表</h1><ul><li style="list-style: none"><input type="checkbox"> 多文件的项目开发支持</li><li style="list-style: none"><input type="checkbox" checked> 主页例子展示，他人可通过提交代码添加例子</li></ul><h1 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h1><p>MIT</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作品 </tag>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Editor</title>
      <link href="/2019/10/11/markdown-editor/"/>
      <url>/2019/10/11/markdown-editor/</url>
      
        <content type="html"><![CDATA[<p><img width="100%" src="https://renhongl.github.io/images/31.PNG" alt="example1"></p><a id="more"></a><p><img width="100%" src="https://renhongl.github.io/images/32.PNG" alt="example1"></p><h1 id="柚子-Markdown-编辑器"><a href="#柚子-Markdown-编辑器" class="headerlink" title="柚子 Markdown 编辑器"></a>柚子 Markdown 编辑器</h1><p>柚子 Markdown 编辑器是一个纯前端语言，基于 react 的 html5 markdown 编辑器。</p><ul><li>在左边写入 markdown 内容</li><li>在右边预览</li></ul><p>在线演示: <a href="https://renhongl.github.io/markdown-editor/">Demo</a></p><p>源码地址: <a href="https://github.com/renhongl/markdown-editor" target="_blank" rel="noopener">GitHub</a></p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ul><li><a href="https://github.com/renhongl/markdown-editor/blob/master/doc-zh.md" target="_blank" rel="noopener">简体中文</a></li><li><a href="https://github.com/renhongl/markdown-editor/blob/master/README.md" target="_blank" rel="noopener">English</a></li></ul><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><ul><li>同时打开多个文档 — <span style="color: red">新</span></li><li>拖动 Markdown 文档到左边区域，自动导入本地文本</li><li>从你的本地导入 markdwon 文档</li><li>导出成 pdf，html，以及 markdown</li><li>通过设置按钮修改主题以及其他设置</li></ul><p>你也可以:</p><ul><li>保存你的文档到本地</li><li>通过帮助文档查看 markdwon 句法</li><li>切换到全屏专注文档编写</li></ul><h1 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h1><p>柚子 Markdown 编辑器使用了下一些技术：</p><ul><li><a href="">React</a> - js 网页增强库</li><li><a href="">CodeMirror</a> - 多才多艺的文本编辑器</li><li><a href="">html2pdf</a> - 客户端的 pdf 转化工局</li><li><a href="">GitPages</a> - 代码保存与部署</li><li><a href="">markdown-it</a> - Markdown 预览库</li><li><a href="">travis</a> - 自动测试与部署</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>柚子 Markdown 编辑器需要 <a href="">Node.js</a> v8+ 去运行.</p><ul><li>安装依赖: <code>npm install</code></li><li>打包应用: <code>npm run build</code></li></ul><h1 id="正在实现的列表"><a href="#正在实现的列表" class="headerlink" title="正在实现的列表"></a>正在实现的列表</h1><ul><li><input type="checkbox" checked disabled>多语言支持</li><li><input type="checkbox" checked disabled>Ctrl-S 快速保存</li><li><input type="checkbox" checked disabled>展示未保存文档的状态</li><li><input type="checkbox" disabled>探索如何保存文档到第三方</li></ul><h1 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h1><p>MIT</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作品 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Callback， Promise, Async的使用区别</title>
      <link href="/2019/06/13/async-function/"/>
      <url>/2019/06/13/async-function/</url>
      
        <content type="html"><![CDATA[<h2 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h2><ul><li>普通情况下，遇到异步情况，可以使用callback的方式，在拿到数据后执行回调函数  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class="line"><span class="keyword">const</span> getWeatherByCallback = <span class="function">(<span class="params">url, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  axios.get(url).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    callback(json);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">getWeatherByCallback(url, (data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>回调方法太多会造成很多问题，所以我们会使用<code>.then()</code>的方式</li><li>那么就需要Promise容器的支持  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class="line"><span class="keyword">const</span> getWeatherByPromise = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      axios(url).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(json);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">getWeatherByPromise(url).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(json));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h2><ul><li>把异步的写法改成同步的写法，就需要使用async</li><li>async一旦遇到await就会返回，返回的是Promise对象</li><li><p>return 返回的值就是then中的参数</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class="line"><span class="keyword">const</span> getWeatherByPyAsync = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> axios.get(url);</span><br><span class="line">&#125;</span><br><span class="line">getWeatherByPyAsync(url).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(json));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>News App</title>
      <link href="/2019/05/27/news-app/"/>
      <url>/2019/05/27/news-app/</url>
      
        <content type="html"><![CDATA[<p><img src="https://renhongl.github.io/images/27.PNG" alt="example1"></p><a id="more"></a><p><img src="https://renhongl.github.io/images/21.PNG" alt="example1"><br><img src="https://renhongl.github.io/images/22.PNG" alt="example1"><br><img src="https://renhongl.github.io/images/23.PNG" alt="example1"><br><img src="https://renhongl.github.io/images/24.PNG" alt="example1"><br><img src="https://renhongl.github.io/images/26.PNG" alt="example1"></p><h1 id="新闻应用"><a href="#新闻应用" class="headerlink" title="新闻应用"></a>新闻应用</h1><p>使用Ionic开发的新闻APP<br>后端使用KOA开发</p><p>源码地址: <a href="https://github.com/renhongl/news-app" target="_blank" rel="noopener">GitHub</a></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li>登陆/注册</li><li>获取邮件验证码</li><li>上传头像</li><li>发布新闻</li><li>获取最近新闻</li><li>查看用于主页</li></ul><h1 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h1><p>MIT</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作品 </tag>
            
            <tag> Angular </tag>
            
            <tag> Ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>News App API</title>
      <link href="/2019/05/26/news-app-api/"/>
      <url>/2019/05/26/news-app-api/</url>
      
        <content type="html"><![CDATA[<p><img width="100%" src="https://renhongl.github.io/images/1.png" alt="example1"></p><a id="more"></a><p><img width="100%" src="https://renhongl.github.io/images/2.png" alt="example1"><br><img width="100%" src="https://renhongl.github.io/images/3.png" alt="example1"><br><img width="100%" src="https://renhongl.github.io/images/4.png" alt="example1"><br><img width="100%" src="https://renhongl.github.io/images/5.png" alt="example1"></p><h1 id="新闻应用API"><a href="#新闻应用API" class="headerlink" title="新闻应用API"></a>新闻应用API</h1><p>是新闻APP的后端支持</p><p>是使用KOA开发的</p><p>功能文档：<a href="https://github.com/renhongl/news-app" target="_blank" rel="noopener">前端文档</a></p><p>源码地址: <a href="https://github.com/renhongl/news-app-api" target="_blank" rel="noopener">GitHub</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>克隆改仓库</li><li>进入根目录</li><li>运行命令: <code>npm install</code> 安装依赖</li></ul><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><ul><li>运行开发服务器: <code>npm run serve</code></li><li>服务器地址: http:localhost:3000</li><li>Swagger文档地址: http:loaclhost:3000/doc</li></ul><h1 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h1><p>MIT</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作品 </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-堆</title>
      <link href="/2019/04/23/heap/"/>
      <url>/2019/04/23/heap/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。</li><li>如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。</li><li>如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。</li></ul><a id="more"></a><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul><li>中序遍历<code>inOrder(callback, node)</code></li><li>先序遍历<code>preOrder(callback, node)</code></li><li>后序遍历<code>postOrder(callback, node)</code></li><li>层级遍历<code>levelOrder(callback, node)</code></li><li><strong>按顺序插入数据</strong><code>insert(data, node)</code>，最大的在最上面，这是与二叉树不同的地方</li><li>删除数据<code>remove(data, node)</code></li><li>二叉树所有数据的快照<code>toString()</code></li></ul><h2 id="主要算法分析"><a href="#主要算法分析" class="headerlink" title="主要算法分析"></a>主要算法分析</h2><ul><li>与二叉树最主要的区别就是，在插入时，根节点的值始终大于左右节点的值。</li><li>如果插入的值大于根节点的值，那么该值会替换根节点的值，根节点的值会往下插入。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    insert(data, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._root = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果插入的数据比根节点的数据大</span></span><br><span class="line">            <span class="comment">//那么，将插入数据与根节点数据交换，再进行插入</span></span><br><span class="line">            <span class="keyword">if</span> (data &gt; node.data) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = data;</span><br><span class="line">                data = node.data;</span><br><span class="line">                node.data = temp;</span><br><span class="line">                <span class="keyword">this</span>.insert(data, node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!node.left) &#123;</span><br><span class="line">                    <span class="keyword">return</span> node.left = <span class="keyword">new</span> Node(data);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!node.right) &#123;</span><br><span class="line">                    <span class="keyword">return</span> node.right = <span class="keyword">new</span> Node(data);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.left &amp;&amp; node.left.data &lt;= data) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.insert(data, node.left);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.insert(data, node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    inOrder(callback, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            <span class="keyword">this</span>.inOrder(callback, node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(node);</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.inOrder(callback, node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    preOrder(callback, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        callback(node);</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            <span class="keyword">this</span>.preOrder(callback, node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.preOrder(callback, node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    postOrder(callback, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            <span class="keyword">this</span>.postOrder(callback, node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.postOrder(callback, node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//层级遍历</span></span><br><span class="line">    levelOrder(callback, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> queue = [];</span><br><span class="line">        queue.push(node);</span><br><span class="line">        <span class="keyword">while</span> (queue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = queue.shift();</span><br><span class="line">            callback(curr);</span><br><span class="line">            curr.left &amp;&amp; queue.push(curr.left);</span><br><span class="line">            curr.right &amp;&amp; queue.push(curr.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(data, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._root.data === data) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = <span class="keyword">this</span>._root;</span><br><span class="line">            <span class="keyword">this</span>._root = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = node.left;</span><br><span class="line">            <span class="keyword">if</span> (curr.data === data) &#123;</span><br><span class="line">                node.left = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.remove(data, node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = node.right;</span><br><span class="line">            <span class="keyword">if</span> (curr.data === data) &#123;</span><br><span class="line">                node.right = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.remove(data, node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>._root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bt = <span class="keyword">new</span> BinaryTree();</span><br><span class="line">bt.insert(<span class="number">35</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">52</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">21</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">11</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">16</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">87</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">100</span>, bt._root);</span><br><span class="line"><span class="built_in">console</span>.log(bt.toString());</span><br><span class="line">bt.levelOrder(<span class="function">(<span class="params">node</span>) =&gt;</span> <span class="built_in">console</span>.log(node.data));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-二叉树</title>
      <link href="/2019/04/22/binaryTree/"/>
      <url>/2019/04/22/binaryTree/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。</li><li>一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。</li></ul><a id="more"></a><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul><li>中序遍历<code>inOrder(callback, node)</code></li><li>先序遍历<code>preOrder(callback, node)</code></li><li>后序遍历<code>postOrder(callback, node)</code></li><li>层级遍历<code>levelOrder(callback, node)</code></li><li>插入数据<code>insert(data, node)</code></li><li>删除数据<code>remove(data, node)</code></li><li>二叉树所有数据的快照<code>toString()</code></li></ul><h2 id="主要算法分析"><a href="#主要算法分析" class="headerlink" title="主要算法分析"></a>主要算法分析</h2><ul><li>中序遍历就是先遍历左子树，如果左子树还有子树，就继续遍历其子树，并且先遍历左子树</li><li>先序遍历和后序遍历类似，只是遍历每个节点左根右节点时，使用不同的顺序</li><li>层级遍历是从根节点一层一层往下遍历 </li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    insert(data, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._root = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data &lt;= node.data) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!node.left) &#123;</span><br><span class="line">                    node.left = <span class="keyword">new</span> Node(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.insert(data, node.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!node.right) &#123;</span><br><span class="line">                    node.right = <span class="keyword">new</span> Node(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.insert(data, node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    inOrder(callback, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            <span class="keyword">this</span>.inOrder(callback, node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(node);</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.inOrder(callback, node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    preOrder(callback, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        callback(node);</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            <span class="keyword">this</span>.preOrder(callback, node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.preOrder(callback, node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    postOrder(callback, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            <span class="keyword">this</span>.postOrder(callback, node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.postOrder(callback, node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//层级遍历</span></span><br><span class="line">    levelOrder(callback, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> queue = [];</span><br><span class="line">        queue.push(node);</span><br><span class="line">        <span class="keyword">while</span> (queue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = queue.shift();</span><br><span class="line">            callback(curr);</span><br><span class="line">            curr.left &amp;&amp; queue.push(curr.left);</span><br><span class="line">            curr.right &amp;&amp; queue.push(curr.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(data, node = <span class="keyword">this</span>._root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._root.data === data) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = <span class="keyword">this</span>._root;</span><br><span class="line">            <span class="keyword">this</span>._root = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = node.left;</span><br><span class="line">            <span class="keyword">if</span> (curr.data === data) &#123;</span><br><span class="line">                node.left = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.remove(data, node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = node.right;</span><br><span class="line">            <span class="keyword">if</span> (curr.data === data) &#123;</span><br><span class="line">                node.right = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.remove(data, node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>._root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bt = <span class="keyword">new</span> BinaryTree();</span><br><span class="line"><span class="comment">//初始化数据，测试各种遍历方法</span></span><br><span class="line">bt._root = &#123;</span><br><span class="line">    data: <span class="number">43</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">        left: &#123;</span><br><span class="line">            data: <span class="number">112</span>,</span><br><span class="line">            left: &#123;</span><br><span class="line">                data: <span class="number">654</span>,</span><br><span class="line">                left: <span class="literal">null</span>,</span><br><span class="line">                right: <span class="literal">null</span></span><br><span class="line">            &#125;,</span><br><span class="line">            right: &#123;</span><br><span class="line">                data: <span class="number">89</span>,</span><br><span class="line">                left: &#123;</span><br><span class="line">                    data: <span class="number">94</span>,</span><br><span class="line">                    left: <span class="literal">null</span>,</span><br><span class="line">                    right: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        right: <span class="literal">null</span>,</span><br><span class="line">        data: <span class="number">65</span></span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">        left: <span class="literal">null</span>,</span><br><span class="line">        right: <span class="literal">null</span>,</span><br><span class="line">        data: <span class="number">756</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bt.inOrder(<span class="function">(<span class="params">node</span>) =&gt;</span> <span class="built_in">console</span>.log(node.data));</span><br><span class="line">bt.preOrder(<span class="function">(<span class="params">node</span>) =&gt;</span> <span class="built_in">console</span>.log(node.data));</span><br><span class="line">bt.postOrder(<span class="function">(<span class="params">node</span>) =&gt;</span> <span class="built_in">console</span>.log(node.data));</span><br><span class="line">bt.levelOrder(<span class="function">(<span class="params">node</span>) =&gt;</span> <span class="built_in">console</span>.log(node.data));</span><br><span class="line"><span class="comment">//测试插入和删除方法</span></span><br><span class="line">bt.insert(<span class="number">35</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">52</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">21</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">11</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">16</span>, bt._root);</span><br><span class="line">bt.insert(<span class="number">87</span>, bt._root);</span><br><span class="line"><span class="built_in">console</span>.log(bt.toString());</span><br><span class="line">bt.remove(<span class="number">52</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bt.toString());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-树</title>
      <link href="/2019/04/19/tree/"/>
      <url>/2019/04/19/tree/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。</li></ul><a id="more"></a><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul><li>深度遍历<code>deepTravers(callback)</code></li><li>广度遍历<code>breadthTravers(callback)</code></li><li>给指定节点添加<code>add(data, toData)</code></li><li>从指定节点删除<code>remove(data, toData)</code></li><li>判断是否包含给定数据<code>containes(data, tranvers)</code></li></ul><h2 id="主要算法分析"><a href="#主要算法分析" class="headerlink" title="主要算法分析"></a>主要算法分析</h2><ul><li>深度遍历：即遍历完这个节点，就去找该节点的子节点</li><li>广度遍历：即先遍历完该层次的所有节点，再去遍历下一级节点</li><li>操作节点依赖遍历，所以可以先实现遍历的方法，再实现增删操作</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.children = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(data, toData) &#123;</span><br><span class="line">        <span class="keyword">if</span> (toData === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._root = <span class="keyword">new</span> Node(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> target = <span class="keyword">this</span>.getNodeByData(toData, <span class="keyword">this</span>.deepTravers);</span><br><span class="line">        <span class="keyword">if</span> (target !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">            newNode.parent = target.data;</span><br><span class="line">            target.children.push(newNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`Can not add to <span class="subst">$&#123;toData&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(data, toData) &#123;</span><br><span class="line">        <span class="keyword">let</span> target = <span class="keyword">this</span>.getNodeByData(toData, <span class="keyword">this</span>.breadthTravers);</span><br><span class="line">        <span class="keyword">if</span> (target !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; target.children.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data === target.children[i].data) &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> target.children.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`Can not find <span class="subst">$&#123;data&#125;</span> from <span class="subst">$&#123;toData&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deepTravers(callback) &#123;</span><br><span class="line">        <span class="keyword">const</span> travers = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">            callback(node);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class="line">                travers(node.children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        travers(<span class="keyword">this</span>._root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    breadthTravers(callback) &#123;</span><br><span class="line">        <span class="keyword">let</span> queue = [];</span><br><span class="line">        queue.push(<span class="keyword">this</span>._root);</span><br><span class="line">        <span class="keyword">while</span> (queue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = queue.shift();</span><br><span class="line">            callback(curr);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; curr.children.length; i++) &#123;</span><br><span class="line">                queue.push(curr.children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    containes(data, travers) &#123;</span><br><span class="line">        <span class="keyword">let</span> contain = <span class="literal">false</span>;</span><br><span class="line">        travers.call(<span class="keyword">this</span>, (node) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(node.data, data);</span><br><span class="line">            <span class="keyword">if</span> (node.data === data) &#123;</span><br><span class="line">                contain = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> contain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getNodeByData(data, travers) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">        travers.call(<span class="keyword">this</span>, (node) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.data === data) &#123;</span><br><span class="line">                result = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>._root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tree = <span class="keyword">new</span> Tree();</span><br><span class="line">tree.add(<span class="number">43</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(tree.toString());</span><br><span class="line">tree.deepTravers(<span class="function">(<span class="params">node</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Deep Travers:'</span>, node.data));</span><br><span class="line">tree.breadthTravers(<span class="function">(<span class="params">node</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Breadth Travers:'</span>, node.data));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Containes 43:'</span>, tree.containes(<span class="number">43</span>, tree.deepTravers));</span><br><span class="line">tree.add(<span class="number">65</span>, <span class="number">44</span>);</span><br><span class="line">tree.add(<span class="number">65</span>, <span class="number">43</span>);</span><br><span class="line">tree.add(<span class="number">111</span>, <span class="number">65</span>);</span><br><span class="line">tree.add(<span class="number">322</span>, <span class="number">111</span>);</span><br><span class="line">tree.add(<span class="number">453</span>, <span class="number">43</span>);</span><br><span class="line"><span class="built_in">console</span>.log(tree.toString());</span><br><span class="line">tree.remove(<span class="number">322</span>, <span class="number">111</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-链表</title>
      <link href="/2019/04/18/linkedList/"/>
      <url>/2019/04/18/linkedList/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</li><li>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</li><li>在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（”links”）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。</li></ul><a id="more"></a><h2 id="实现例部分接口"><a href="#实现例部分接口" class="headerlink" title="实现例部分接口"></a>实现例部分接口</h2><ul><li>获取长度<code>getSize()</code></li><li>获取所有值的快照<code>toString()</code></li><li>在尾部添加<code>append(value)</code></li><li>在头部添加<code>unshift(value)</code></li><li>在指定位置添加<code>insert(index, value)</code></li><li>在尾部删除<code>pop()</code></li><li>在头部删除<code>shift()</code></li><li>在指定位置删除<code>remove(index)</code></li><li>获取指定位置的值<code>getValue(index)</code></li></ul><h2 id="主要算法分析"><a href="#主要算法分析" class="headerlink" title="主要算法分析"></a>主要算法分析</h2><ul><li>需要创建一个<code>Node</code>类，作为链表的节点</li><li>在插入删除时，先遍历找到操作的位置，然后通过修过<code>next</code>指向的位置，其他值的位置保持不变</li><li>所以链表增删非常容易，不会影响其他节点。但是读取值，需要依次遍历找到。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>._value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._head = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>._size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">while</span> (curr !== <span class="literal">null</span>) &#123;</span><br><span class="line">            result += curr.getValue() + <span class="string">', '</span>;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    append(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._head = <span class="keyword">new</span> Node(value);</span><br><span class="line">            <span class="keyword">this</span>._size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr.next === <span class="literal">null</span>) &#123;</span><br><span class="line">                curr.next = <span class="keyword">new</span> Node(value);</span><br><span class="line">                <span class="keyword">this</span>._size++;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unshift(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._head = <span class="keyword">new</span> Node(value);</span><br><span class="line">            <span class="keyword">this</span>._size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> currHead = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">this</span>._head = <span class="keyword">new</span> Node(value);</span><br><span class="line">        <span class="keyword">this</span>._head.next = currHead;</span><br><span class="line">        <span class="keyword">this</span>._size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    insert(index, value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>._size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Index out of range'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.unshift(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="keyword">this</span>._size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.append(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(value);</span><br><span class="line">        newNode.next = curr.next;</span><br><span class="line">        curr.next = newNode;</span><br><span class="line">        <span class="keyword">this</span>._size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">let</span> before = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            before = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        before.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>._size--;</span><br><span class="line">        <span class="keyword">return</span> curr.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shift() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> head = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">this</span>._head = head.next;</span><br><span class="line">        <span class="keyword">this</span>._size--;</span><br><span class="line">        <span class="keyword">return</span> head.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>._size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Index out of range'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.shift();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="keyword">this</span>._size - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">let</span> before = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            before = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        before.next = curr.next;</span><br><span class="line">        <span class="keyword">this</span>._size--;</span><br><span class="line">        <span class="keyword">return</span> curr.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getItem(index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>._size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Index out of range'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._head.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> l = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="built_in">console</span>.log(l.toString());</span><br><span class="line">l.insert(<span class="number">0</span>, <span class="number">43</span>);</span><br><span class="line">l.insert(<span class="number">0</span>, <span class="number">61</span>);</span><br><span class="line">l.insert(<span class="number">0</span>, <span class="number">65</span>);</span><br><span class="line">l.insert(<span class="number">0</span>, <span class="number">67</span>);</span><br><span class="line">l.insert(<span class="number">0</span>, <span class="number">143</span>);</span><br><span class="line">l.insert(<span class="number">0</span>, <span class="number">261</span>);</span><br><span class="line">l.insert(<span class="number">0</span>, <span class="number">365</span>);</span><br><span class="line">l.insert(<span class="number">0</span>, <span class="number">467</span>);</span><br><span class="line"><span class="built_in">console</span>.log(l.toString());</span><br><span class="line"><span class="built_in">console</span>.log(l.getSize());</span><br><span class="line"><span class="built_in">console</span>.log(l.pop());</span><br><span class="line"><span class="built_in">console</span>.log(l.toString());</span><br><span class="line"><span class="built_in">console</span>.log(l.shift());</span><br><span class="line"><span class="built_in">console</span>.log(l.toString());</span><br><span class="line"><span class="built_in">console</span>.log(l.getSize());</span><br><span class="line"><span class="built_in">console</span>.log(l.remove(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(l.toString());</span><br><span class="line"><span class="built_in">console</span>.log(l.getItem(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-队列</title>
      <link href="/2019/04/18/queue/"/>
      <url>/2019/04/18/queue/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</li></ul><a id="more"></a><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul><li>在头部取出<code>shift()</code></li><li>在尾部插入<code>append(value)</code></li></ul><h2 id="链式存储例子"><a href="#链式存储例子" class="headerlink" title="链式存储例子"></a>链式存储例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>._value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._head = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>._size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">while</span> (curr !== <span class="literal">null</span>) &#123;</span><br><span class="line">            result += curr.getValue() + <span class="string">', '</span>;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    append(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._head = <span class="keyword">new</span> Node(value);</span><br><span class="line">            <span class="keyword">this</span>._size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr.next === <span class="literal">null</span>) &#123;</span><br><span class="line">                curr.next = <span class="keyword">new</span> Node(value);</span><br><span class="line">                <span class="keyword">this</span>._size++;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shift() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> head = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">this</span>._head = head.next;</span><br><span class="line">        <span class="keyword">this</span>._size--;</span><br><span class="line">        <span class="keyword">return</span> head.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getItem(index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>._size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Index out of range'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._head.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-栈</title>
      <link href="/2019/04/18/stack/"/>
      <url>/2019/04/18/stack/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。</li><li>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。</li><li>栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。</li><li>栈可以用来在函数调用的时候存储断点，做递归时要用到栈！</li></ul><a id="more"></a><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul><li>从尾部插入<code>append(value)</code></li><li>从尾部删除<code>pop()</code></li></ul><h2 id="链式存储例子"><a href="#链式存储例子" class="headerlink" title="链式存储例子"></a>链式存储例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>._value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._head = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>._size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">while</span> (curr !== <span class="literal">null</span>) &#123;</span><br><span class="line">            result += curr.getValue() + <span class="string">', '</span>;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    append(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._head = <span class="keyword">new</span> Node(value);</span><br><span class="line">            <span class="keyword">this</span>._size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr.next === <span class="literal">null</span>) &#123;</span><br><span class="line">                curr.next = <span class="keyword">new</span> Node(value);</span><br><span class="line">                <span class="keyword">this</span>._size++;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">let</span> before = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            before = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        before.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>._size--;</span><br><span class="line">        <span class="keyword">return</span> curr.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getItem(index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>._size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Index out of range'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._head.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>._head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法练习题</title>
      <link href="/2019/04/17/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/04/17/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>一些常用的算法练习</p><ol><li>题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</li><li>题目：判断101-200之间有多少个素数，并输出所有素数。</li><li>题目：打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方。</li><li>题目：将一个正整数分解质因数。例如：输入90,打印出90=2<em>3</em>3*5。</li></ol><a id="more"></a><ol start="5"><li>题目：利用条件运算符的嵌套来完成此题：学习成绩&gt; =90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。</li><li>题目：输入两个正整数m和n，求其最大公约数和最小公倍数。</li><li>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</li><li>题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。</li><li>题目：一个数如果恰好等于它的因子之和，这个数就称为 “完数 “。例如6=1＋2＋3.编程 找出1000以内的所有完数。</li><li>题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在 第10次落地时，共经过多少米？第10次反弹多高？</li><li>题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</li><li>题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？</li><li>题目：一个整数，它加上100后是一个完全平方数，加上168又是一个完全平方数，请问该数是多少？</li><li>题目：输入某年某月某日，判断这一天是这一年的第几天？</li><li>题目：输入三个整数x,y,z，请把这三个数由小到大输出。</li><li>题目：输出9*9口诀。</li><li>题目：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个 第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下 的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</li><li>题目：两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。</li><li>题目：打印出如下图案（菱形）</li><li>题目：有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。</li><li>题目：求1+2!+3!+…+20!的和。</li><li>题目：利用递归方法求5!。</li><li>题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？</li><li>题目：给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。</li><li>题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。</li><li>题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续 判断第二个字母。</li><li>题目：求100之内的素数。</li><li>题目：对10个数进行排序。</li><li>题目：求一个3*3矩阵对角线元素之和。</li><li>题目：求1+2!+3!+…+20!的和。</li><li>题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。</li><li>题目：将一个数组逆序输出。</li><li>题目：取一个整数a从右端开始的4～7位。</li><li>题目：打印出杨辉三角形（要求打印出10行如下图）。</li><li>题目：输入3个数a,b,c，按大小顺序输出。</li><li>题目：输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。</li><li>题目：有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。</li><li>题目：有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。</li><li>题目：写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。</li><li>题目：字符串排序。</li><li>题目：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？</li><li>题目：写一个函数，输出所有的排列组合。</li><li>题目：写一个函数，给你一个字符串倒序输出来。</li><li>题目：不使用中间变量 把两个变量的值互换。</li><li>题目：将this is a test 转化为This Is A Test。</li><li>题目：写一个单例模式。</li><li>题目：对字母进行排序，如：s,a,g,d,b。</li><li>题目：一个偶数总能表示为两个素数之和。</li><li>题目：某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-顺序表</title>
      <link href="/2019/04/17/seqList/"/>
      <url>/2019/04/17/seqList/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</li></ul><a id="more"></a><h2 id="实现了部分接口"><a href="#实现了部分接口" class="headerlink" title="实现了部分接口"></a>实现了部分接口</h2><ul><li>获取长度<code>getLength()</code></li><li>清空<code>clear()</code></li><li>判断是否未空表<code>isEmpty()</code></li><li>在尾部插入<code>append(value)</code></li><li>在指定位置插入<code>insert(index, value)</code></li><li>从尾部取出值<code>pop()</code></li><li>从指定位置删除<code>remove(index)</code></li><li>从指定位置获取值<code>getItem(index)</code></li><li>从值获得该值得位置<code>locate(value)</code></li><li>获得所有值的快照<code>toString()</code></li></ul><h2 id="主要算法分析"><a href="#主要算法分析" class="headerlink" title="主要算法分析"></a>主要算法分析</h2><ul><li>在添加数据时，先将要添加位置及其后面的数据往后移，再将要添加的数据添加在指定位置</li><li>在删除数据时，将该位置及其后面的数据往前移</li><li>所以顺序表易于读取，从数组索引即可读取，增删耗时较多。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SequenceList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._list = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    append(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>._list[<span class="keyword">this</span>._list.length] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入算法：</span></span><br><span class="line">    <span class="comment">// 增加数组长度</span></span><br><span class="line">    <span class="comment">// 从插入位置到末尾，倒序遍历，将前一个值赋值给后一个值</span></span><br><span class="line">    <span class="comment">// 将插入位置的值，替换成给定的值</span></span><br><span class="line">    insert(index, value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._list.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._list = [value];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._list.length === index) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._list[<span class="keyword">this</span>._list.length] = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._list.length &lt; index) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i === index) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="keyword">this</span>._list.length; j &gt;= i; j--) &#123;</span><br><span class="line">                    <span class="keyword">this</span>._list[j] = <span class="keyword">this</span>._list[j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>._list[index] = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getLength() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._list.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clear() &#123;</span><br><span class="line">        <span class="keyword">this</span>._list = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isEmpty() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._list.length === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._list.length; i++) &#123;</span><br><span class="line">            result += <span class="keyword">this</span>._list[i] + <span class="string">', '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getItem(index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>._list.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._list[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    locate(value) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._list[i] === value) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">let</span> last = <span class="keyword">this</span>._list[<span class="keyword">this</span>._list.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>._list.length = <span class="keyword">this</span>._list.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除算法：</span></span><br><span class="line">    <span class="comment">// 从给定位置，到数组最后，顺序遍历，将后一个值赋值给前一个值</span></span><br><span class="line">    remove(index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="keyword">this</span>._list.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> last = <span class="keyword">this</span>._list[<span class="keyword">this</span>._list.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._list.length = <span class="keyword">this</span>._list.length - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i === index) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; <span class="keyword">this</span>._list.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">this</span>._list[j] = <span class="keyword">this</span>._list[j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>._list.length = <span class="keyword">this</span>._list.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._list;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构概括</title>
      <link href="/2019/04/16/data-structure/"/>
      <url>/2019/04/16/data-structure/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><ul><li>线性表是最基本、最简单、也是最常用的一种数据结构。</li><li>线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储），但是把最后一个数据元素的尾指针指向了首位结点）。<a id="more"></a></li><li>我们说“线性”和“非线性”，只在<strong>逻辑层次</strong>上讨论，而不考虑存储层次，所以双向链表和循环链表依旧是线性表。</li><li>在数据结构逻辑层次上细分，线性表可分为<strong>一般线性表</strong>和<strong>受限线性表</strong>。一般线性表也就是我们通常所说的“线性表”，可以自由的删除或添加结点。受限线性表主要包括<strong>栈</strong>和<strong>队列</strong>，受限表示对结点的操作受限制。</li><li>线性表的逻辑结构简单，便于实现和操作。因此，线性表这种数据结构在实际应用中是广泛采用的一种数据结构。</li></ul><h3 id="顺序表—顺序存储的线性表"><a href="#顺序表—顺序存储的线性表" class="headerlink" title="顺序表—顺序存储的线性表"></a>顺序表—顺序存储的线性表</h3><ul><li>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</li></ul><h3 id="链表—链式存储的线性表"><a href="#链表—链式存储的线性表" class="headerlink" title="链表—链式存储的线性表"></a>链表—链式存储的线性表</h3><ul><li>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</li><li>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</li><li>在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（”links”）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。</li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li>栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。</li><li>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。</li><li>栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。</li><li>栈可以用来在函数调用的时候存储断点，做递归时要用到栈！</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</li></ul><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><ul><li>在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。</li></ul><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ul><li>在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。</li><li>一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul><li>堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。</li><li>如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。</li><li>如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。</li></ul><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><ul><li>树有环了就是图。</li><li>由顶点和连接每对顶点的边所构成的图形就是图。</li><li>而我们还可以给边加上一个值。这个值叫作边的“权重”或者“权”，加了权的图被称为“加权图”。没有权的边只能表示两个顶点的连接状态，而有权的边就可以表示顶点之间的“连接程度”。</li><li>当我们想在路线图中表示该路线只能单向行驶时，就可以给边加上箭头，而这样的图就叫作“有向图”。比如网页里的链接也是有方向性的，用有向图来表示就会很方便。</li></ul><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><ul><li>广度优先搜索是一种对图进行搜索的算法。</li><li>假设我们一开始位于某个顶点（即起点），此时并不知道图的整体结构，而我们的目的是从起点开始顺着边搜索，直到到达指定顶点（即终点）。在此过程中每走到一个顶点，就会判断一次它是否为终点。广度优先搜索会优先从离起点近的顶点开始搜索。</li><li>广度优先搜索的特征为从起点开始，由近及远进行广泛的搜索。因此，目标顶点离起点越近，搜索结束得就越快。</li></ul><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><ul><li>深度优先搜索和广度优先搜索一样，都是对图进行搜索的算法，目的也都是从起点开始搜索直到到达指定顶点（终点）。深度优先搜索会沿着一条路径不断往下搜索直到不能再继续为止，然后再折返，开始搜索下一条候补路径。</li><li>深度优先搜索的特征为沿着一条路径不断往下，进行深度搜索。虽然广度优先搜索和深度优先搜索在搜索顺序上有很大的差异，但是在操作步骤上却只有一点不同，那就是选择哪一个候补顶点作为下一个顶点的基准不同。</li><li>广度优先搜索选择的是最早成为候补的顶点，因为顶点离起点越近就越早成为候补，所以会从离起点近的地方开始按顺序搜索；而深度优先搜索选择的则是最新成为候补的顶点，所以会一路往下，沿着新发现的路径不断深入搜索。</li></ul><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><ul><li>最短路径问题就是在加权图指定了起点和终点的前提下，寻找从起点到终点的路径中权重总和最小的那条路径。</li></ul><h4 id="贝尔曼-福特算法（Bellman-Ford）"><a href="#贝尔曼-福特算法（Bellman-Ford）" class="headerlink" title="贝尔曼-福特算法（Bellman-Ford）"></a>贝尔曼-福特算法（Bellman-Ford）</h4><ul><li>它的原理是对图进行V-1次松弛操作，得到所有可能的最短路径。</li><li>其优于迪科斯彻算法的方面是边的权值可以为负数、实现简单，缺点是时间复杂度过高，高达O(VE)。但算法可以进行若干种优化，提高了效率。</li></ul><h4 id="狄克斯特拉算法（Dijkstra）"><a href="#狄克斯特拉算法（Dijkstra）" class="headerlink" title="狄克斯特拉算法（Dijkstra）"></a>狄克斯特拉算法（Dijkstra）</h4><ul><li>若从S点到T点有一条最短的路径，则该路径上的任何点到S的距离都是最短的。</li><li>狄克斯特拉算法会从离起点近的顶点开始，按顺序求出起点到各个顶点的最短路径。</li></ul><h4 id="A-算法（A-Star）"><a href="#A-算法（A-Star）" class="headerlink" title="A*算法（A-Star）"></a>A*算法（A-Star）</h4><ul><li>A*算法是一种静态路网中求解最短路最有效的方法。</li><li>A*算法在游戏编程中经常被用于计算敌人追赶玩家时的行动路线等，但由于该算法的计算量较大，所以可能会使游戏整体的运行速度变慢。因此在实际编程时，需要考虑结合其他算法，或者根据具体的应用场景做出相应调整。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-查找</title>
      <link href="/2019/04/15/search/"/>
      <url>/2019/04/15/search/</url>
      
        <content type="html"><![CDATA[<h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><ul><li><p>按照数组顺序一个一个的找下去，直到找到</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> orderSearch = <span class="function">(<span class="params">source, target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source[i] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><h2 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h2><ul><li><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。[1]</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用递归</span></span><br><span class="line"><span class="keyword">const</span> binarySearch = <span class="function">(<span class="params">source, left, right, target</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> midIndex = <span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> mid = source[midIndex];</span><br><span class="line">    <span class="keyword">if</span> (target === mid) &#123;</span><br><span class="line">    <span class="keyword">return</span> midIndex;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; mid) &#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearch(source, left, midIndex, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; mid)&#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearch(source, midIndex, right, target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用递归</span></span><br><span class="line"><span class="keyword">const</span> biSearch = <span class="function">(<span class="params">source, left, right, target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (source[mid] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; source[mid]) &#123;</span><br><span class="line">      right = mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      left = mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h2><ul><li><p>step1 先选取各块中的最大关键字构成一个索引表；</p></li><li><p>step2 查找分两个部分：先对索引表进行二分查找或</p></li><li><p>顺序查找，以确定待查记录在哪一块中；</p></li><li><p>然后，在已确定的块中用顺序法进行查找。</p></li></ul><h2 id="树形查找"><a href="#树形查找" class="headerlink" title="树形查找"></a>树形查找</h2><h2 id="散裂查找"><a href="#散裂查找" class="headerlink" title="散裂查找"></a>散裂查找</h2><ul><li>在进行查找时，在记录的存储位置与它的关键字之间建立一个确定的对应关系h,以线性表中每个元素的关键字K为自变量，通过函数h(K)计算出该元素的存储位置，我们将h函数称为散列函数或哈希函数。这种查找方法称为散列查找。</li><li>就是常用的js对象的读取？</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-排序</title>
      <link href="/2019/04/14/sort/"/>
      <url>/2019/04/14/sort/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序（Quick Sort），又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。</p><p>快速排序使用<strong>分治法</strong>（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>从数列中挑出一个元素，称为“基准”（pivot），</p></li><li><p>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p></li><li><p>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p></li><li><p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 快速排序</span></span><br><span class="line"><span class="comment">* 取第一个值，作为中间值，与余下的一次比较</span></span><br><span class="line"><span class="comment">* 比中间值小的，放左边数组</span></span><br><span class="line"><span class="comment">* 比中间值大的，放右边数组</span></span><br><span class="line"><span class="comment">* 递归调用，直到每个数组只剩一个元素，返回该数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">const</span> quickSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> left =[];</span><br><span class="line">    <span class="keyword">let</span> right =[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;mid)&#123;</span><br><span class="line">        left.push(arr[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        right.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat([mid],quickSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</p><p>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。</p><p>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * 取前一个和后一个值比较，前者大则交换</span></span><br><span class="line"><span class="comment"> * 第一次循环结束，最后一个值为最大</span></span><br><span class="line"><span class="comment"> * 数组有多长，外层循环多少次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> bubbleSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">//控制循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123; <span class="comment">//循环一次，最后一位最大，下次不用再循环</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * 首先将最小下标设为第一个值得下标</span></span><br><span class="line"><span class="comment"> * 依次取后面的值与之相比比，如果更小，将最小下标设为该值的下标</span></span><br><span class="line"><span class="comment"> * 第一次循环结束，将数组第一位值与最小下标对应的值交换</span></span><br><span class="line"><span class="comment"> * 第一次循环结束，第一个值为最小值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> selectSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序（Merge Sort）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组分治， 将分治的数组排序，将有序的数组合并</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">left, right</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.concat(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> * 将数组递归分成左右两个数组，直到数组只剩一个元素</span></span><br><span class="line"><span class="comment"> * 将分完的数组，依次按大小合并</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mergeSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> midIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> left = arr.slice(<span class="number">0</span>, midIndex);</span><br><span class="line">    <span class="keyword">let</span> right = arr.slice(midIndex);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>直接插入排序，指每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序。具体方法是第一趟比较前两个数，然后把第二个数按大小插入到有序表中； 第二趟把第三个数据与前两个数从前向后扫描，把第三个数按大小插入到有序表中；依次进行下去，进行了(n-1)趟扫描以后就完成了整个排序过程。它是由两层嵌套循环组成的，外层循环标识并决定待比较的数值，内层循环为待比较数值确定其最终位置。直接插入排序是将待比较的数值与它的前一个数值进行比较，所以外层循环是从第二个数值开始的。当前一数值比待比较数值大的情况下继续循环比较，直到找到比待比较数值小的并将待比较数值置入其后一位置，结束该次循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接插入排序</span></span><br><span class="line"><span class="comment"> * 把将要排序的那个依次与前面排好的比较，倒序比较，比前面的小，就往前换</span></span><br><span class="line"><span class="comment"> * 循环，知道换到前面比它小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> insertSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">            arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序(Heap Sort)是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构。</p><p>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</li><li>将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</li><li>反复执行调整+交换步骤，直到整个序列有序。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆排序使用的创建顶堆</span></span><br><span class="line"><span class="keyword">const</span> createMaxHeap = <span class="function">(<span class="params">arr, len</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> create = <span class="function">(<span class="params">arr, i, len</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> maxIndex = i;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">2</span> * i;</span><br><span class="line">        <span class="keyword">let</span> right = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[maxIndex] &lt; arr[left]) &#123;</span><br><span class="line">            maxIndex = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[maxIndex] &lt; arr[right]) &#123;</span><br><span class="line">            maxIndex = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[maxIndex];</span><br><span class="line">        arr[maxIndex] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        create(arr, i, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> * 循环创建最小堆，依次取出堆顶元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> heapSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        createMaxHeap(arr, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序（Radix Sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基数排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> radixSort = <span class="function">(<span class="params">arr, maxDigit</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = [];</span><br><span class="line">    <span class="keyword">let</span> mod = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> dev = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev);</span><br><span class="line">            <span class="keyword">if</span> (counter[bucket] == <span class="literal">null</span>) &#123;</span><br><span class="line">                counter[bucket] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].push(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; counter.length; j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (counter[j] != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> ((value = counter[j].shift()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    arr[pos++] = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。</p><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> * 循环递减增量， 直到小于1</span></span><br><span class="line"><span class="comment"> * 将数组元素按增量分组</span></span><br><span class="line"><span class="comment"> * 将每一组的数据使用直接插入的方式排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> shellSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//不断减小间隔，直到间隔为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> gap = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>); gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="comment">//这里有待解释</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> j = i;</span><br><span class="line">            <span class="comment">//将以间隔分组的数据，使用直接插入排序的方式排序</span></span><br><span class="line">            <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">                arr[j - gap] = temp;</span><br><span class="line">                j -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>计数排序（Count Sort）是一种不基于比较的排序方法。</p><p>计数排序的思路是这样的，对于每一个待排序元素a，如果知道了待排序数组中有多少个比它小的数，那么就可以直接知道在排序后的数组中 a 应该在什么位置上。比如，如果一个数组中有3个数是比a小的，那么，在排序后的数组里，a必然会出现在第4位。</p><p>现在问题转化成，对于待排序数组里的一个数，如何能快速知道比它小的数字有多少个。要解决这个问题，我们不能使用比较的办法，那样时间复杂度是无法降下来，只有换一个思路，以空间换时间。因为n个数的取值范围是 0~n，所以，不妨使用一个大小为 n 的数组来统计从0到n，每个数在待排序数组中出现的次数。这个数组类似于直方图数组，因为这种方式也被称做是基于统计的排序。直方图统计的思路简单清晰，在很多题目中都会有出现，一定要熟练掌握这种技巧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计数排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> countingSort = <span class="function">(<span class="params">arr, maxValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> bucket = <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> arrLen = arr.length;</span><br><span class="line">    <span class="keyword">let</span> bucketLen = maxValue + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">            bucket[arr[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[sortedIndex++] = j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>关于算法分析总结的文章请前往：<a href="https://renhongl.github.io/2019/04/13/排序算法分析/">排序算法分析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-排序分析</title>
      <link href="/2019/04/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2019/04/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>在计算机科学中，算法的时间复杂度是一个函数，它定性描述该算法的运行时间。这是一个代表算法输入值的字符串的长度的函数。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 n （必须比 n0 大）的输入，它至多需要 5n3 + 3n 的时间运行完毕，那么它的渐近时间复杂度是 O(n3)。</p><p>为了计算时间复杂度，我们通常会估计算法的操作单元数量，每个单元运行的时间都是相同的。因此，总运行时间和算法的操作单元数量最多相差一个常量系数。</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。比如直接插入排序的时间复杂度是O(n^2),空间复杂度是O(1) 。而一般的递归算法就要有O(n)的空间复杂度了，因为每次递归都要存储返回信息。一个算法的优劣主要从算法的执行时间和所需要占用的存储空间两个方面衡量。</p><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>我们介绍了这么多排序算法，一直在考察它们的时间复杂度和空间复杂度。而忽略了另外一个重要的指标：稳定性。</p><p>所谓稳定性是指，如果待排序数组 a 中，有两个数 a[i] 和 a[j] 相等，并且 i &lt; j，在排好序以后，a[i] 仍然在 a[j] 之前。那么我们就说这个排序算法是稳定的。我们回顾一下，目前掌握的所有排序方法。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>把小的元素往前调或者把大的元素往后调。相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，没必要再把他们交换。所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。例如，序列4 2 3 1 2， 第一遍选择第一个元素4，和后面的2交换，那么原序列中两个 2 的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。但是，我们可以通过引入额外的辅助数组使它变成稳定的排序算法。这个做为作业题留给大家去思考。</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>其不稳定性是由分隔算法决定的。我们在分隔的时候没有做出稳定的保证，其不稳定性是显而易见的。而且，想把它改造成稳定性的排序算法，所付出的努力会比较大，得不偿失。所以，我们通常会把快速排序做为一种不稳定的算法。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也不会交换，这不会破坏稳定性。接着，在短的有序序列合并的过程中，稳定也不会受到破坏，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序是稳定的排序算法。</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>作为选择排序的一个特例，堆排序也是不稳定的。很容易理解，我们在调整堆的时候，假设父结点与右子结点发生了对换，那么右子结点与左子树上的相同元素的次序就会打乱。它也是不稳定的排序算法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由此，我们总结了这张表：<br><img src="https://kuangzhenfeng.github.io/sort/res/sort.png" alt=""></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/26595385?group_id=842495057868226560" target="_blank" rel="noopener">海纳的知乎</a><br><a href="https://baike.sogou.com" target="_blank" rel="noopener">搜狗百科</a><br><a href="https://kuangzhenfeng.github.io/sort/index.html" target="_blank" rel="noopener">锋之律的博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年学习计划</title>
      <link href="/2019/03/15/2019-plan/"/>
      <url>/2019/03/15/2019-plan/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><input type="checkbox" disabled checked> <a href="https://renhongl.github.io/tags/数据结构与算法/">熟练使用基本的数据结构</a></p><p><input type="checkbox" disabled checked> <a href="https://renhongl.github.io/tags/数据结构与算法/">熟练使用搜索算法</a></p><p><input type="checkbox" disabled checked> <a href="https://renhongl.github.io/tags/数据结构与算法/">熟练使用各种排序算法</a></p><p><input type="checkbox" disabled> 了解深层次算法</p><p><input type="checkbox" disabled> 再次熟悉各种设计模式</p><p><input type="checkbox" disabled checked> <a href="https://github.com/renhongl/threejs-example" target="_blank" rel="noopener">熟悉ThreeJS使用方法</a></p><p><input type="checkbox" disabled checked> 熟练使用C#和Unity 3D</p><p><input type="checkbox" disabled> 熟练使用Java和Spring Boot</p><p><input type="checkbox" disabled checked> 熟练使用Angular开发项目</p><p><input type="checkbox" disabled> 熟练使用RxJS响应式编程</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p><input type="checkbox" disabled checked> Unity 3D 完全自学教程</p><p><input type="checkbox" disabled checked> Unity 5.X 3D游戏开发技术详解与典型案例</p><p><input type="checkbox" disabled checked> Three.js 开发指南</p><p><input type="checkbox" disabled checked> Angular 从零到一</p><p><input type="checkbox" disabled checked> 深入浅出RxJS</p><p><input type="checkbox" disabled> SpringBoot 揭秘：快速构建微服务体系</p><p><input type="checkbox" disabled> 我的第一本算法书</p><p><input type="checkbox" disabled> Java从入门到精通</p><p><input type="checkbox" disabled> C#从入门到精通</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><input type="checkbox" disabled checked> Pluggable Angular Project</p><p><input type="checkbox" disabled checked> <a href="http://c.biancheng.net/unity3d/" target="_blank" rel="noopener">Unity 3D 教程</a></p><p><input type="checkbox" disabled checked> 数据结构网络教程</p><p><input type="checkbox" disabled checked> <a href="https://renhongl.github.io/tags/数据结构与算法/">排序算法网络教程</a></p><p><input type="checkbox" disabled> <a href="https://www.w3cschool.cn/wkspring/pesy1icl.html" target="_blank" rel="noopener">Spring</a></p><p><input type="checkbox" disabled> <a href="https://www.yiibai.com/spring-boot/" target="_blank" rel="noopener">Spring Boot</a></p><p><input type="checkbox" disabled> <a href="https://koa.bootcss.com" target="_blank" rel="noopener">KOA 中文教程</a></p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><input type="checkbox" disabled checked> <a href="https://github.com/renhongl/markdown-editor" target="_blank" rel="noopener">Markdown Editor</a></p><p><input type="checkbox" disabled checked> <a href="https://github.com/renhongl/code-online" target="_blank" rel="noopener">Code Online</a></p><p><input type="checkbox" disabled checked> <a href="https://github.com/renhongl/wangyiyun-online" target="_blank" rel="noopener">Wang Yi Yun Online</a></p><p><input type="checkbox" disabled checked> <a href="https://github.com/renhongl/python-tools" target="_blank" rel="noopener">网易云评论爬虫</a></p><p><input type="checkbox" disabled checked> <a href="https://github.com/renhongl/python-tools" target="_blank" rel="noopener">微信自动回复</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/2018/06/18/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/06/18/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是函数式编程"><a href="#什么是函数式编程" class="headerlink" title="什么是函数式编程"></a>什么是函数式编程</h2><ul><li>简单说，”函数式编程”是一种”编程范式”（programming paradigm），也就是如何编写程序的方法论。<br>它属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。</li></ul><a id="more"></a><ul><li>与面向对象编程（Object-oriented programming）和过程式编程（Procedural programming）并列的编程范式。<br>最主要的特征是，函数是第一等公民。<br>强调将计算过程分解成可复用的函数，典型例子就是map方法和reduce方法组合而成 MapReduce 算法。<br>只有纯的、没有副作用的函数，才是合格的函数。</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>函数是”第一等公民”<br>指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p></li><li><p>只用”表达式”，不用”语句”<br>“表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。<br>函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p></li><li><p>没有”副作用”<br>指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。<br>函数式编程强调没有”副作用”，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p></li><li><p>不修改状态<br>在其他类型的语言中，变量往往用来保存”状态”（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。</p></li></ol><ol start="5"><li>引用透明<br>指的是函数的运行不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</li></ol><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><ol><li><p>代码简洁，开发快速<br>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p></li><li><p>接近自然语言，易于理解<br>函数式编程的自由度很高，可以写出很接近自然语言的代码。</p></li><li><p>更方便的代码管理<br>函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。<br>因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p></li></ol><ol start="4"><li><p>易于”并发编程”<br>函数式编程不需要考虑”死锁”（deadlock），因为它不修改变量，所以根本不存在”锁”线程的问题。不必担心一个线程的数据，<br>被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署”并发编程”（concurrency）。</p></li><li><p>代码的热升级<br>函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的。所以，可以在运行状态下直接升级代码，不需要重启，也不需要停机。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职业发展方向</title>
      <link href="/2018/06/18/career-development/"/>
      <url>/2018/06/18/career-development/</url>
      
        <content type="html"><![CDATA[<h1 id="技术类人员的职业发展方向"><a href="#技术类人员的职业发展方向" class="headerlink" title="技术类人员的职业发展方向"></a>技术类人员的职业发展方向</h1><p>几乎每 个企业都需要技术人员的支持，生产制造型企业需要现场生产控制和工艺流程方面的技术人才；IT等高科技行业需要大量软件研发和设备维护的硬件工程师；房地 产、建筑工程领域需要建筑设计师、土木工程师和施工技术人员。此外，不论是国企、民营企业还是外资公司，都需要大量的基础技术工人。甚至很多在豪华写字楼 office内工作的白领，从事的工作都是和技术相关的。</p><a id="more"></a><p>　　不过，一个严峻的现实是，大量的技术类人员对自己的职业定位和职业生涯规划显得非常迷茫和困惑。中国有句古话：劳心者治人，劳力者治于人。与管理类岗 位相比，技术人员往往被人看低一等，他们虽然从事着非常重要、繁琐的技术性工作，但更多的是扮演着幕后英雄的角色。在社会地位、经济收入方面与分光无限的 各级管理层普遍存在差距，这一现实造就了技术人员的巨大心理落差。第二个造成职业规划困惑的原因是部分技术性工作的局限性。拿IT行业来说，由于技术和知 识更新的速度太快，软件开放人员普遍被认为是吃“青春饭”的职位，谁学习的更快、谁的精力更旺盛、谁更能熬夜，谁就更有竞争力，因为这时经验已经不再重 要。如果超过35岁还从事软件开发的话，将很难在本职岗位取得突破。</p><p>　　那么，对于技术类人员来说，难道他们的职业发展前景真的如此黯淡？事实当然不会如此悲观，做技术工作同样有着非常广阔的空间，当然，关键一点你要令自己的视野更开阔些，从长远的角度来看待这个问题。根据我的经验，技术人员的职业方向可以有以下几个选择： </p><p>　　方向一、成为项目经理</p><p>　　对于很多从事技术方面工作的人员来说，发展成为项目经理是一个相当好的工作。项目管理工作既需要扎实的技术背景支持，又涉及多方面的管理工作，最适合 那些技术出身但又不甘于只做技术工作的人员。成为项目经理，一方面可以充分发挥技术人员的专业优势，同时又可在团队管理、协调各方资源、内外部沟通等工作 中体验和发挥作为管理者的角色和作用，从而让自身价值更为充分的实现和得到认可。优秀的项目管理人才，也是今后很长时期内的一个热门职业方向。</p><p>　　方向二、成为行业资深专家</p><p>　　如果的确非常喜爱技术工作，而不擅长和喜欢与人沟通，则可以完全专注于自身的领域，以发展成为行业资深专家为方向和目标，当然，这一发展过程可能会比 较漫长，任何一个领域的顶尖技术人才都需要长期的行业经验的累积和个人孜孜不倦的投入。不过这类人才的一个优势是越老越吃香，当别人随着年龄的逐步增长而 开始担心饭碗问题时，你则渐入佳境，开始进入职业发展的黄金时期。</p><p>　　方向三、成为研发经理或技术总监</p><p>　　事实上，在某些行业和企业，技术研发人员的地位是非常高的。譬如在微软、诺基亚、华为等IT产业，技术的支持和研发的速度，成为企业利润增长的最主要 来源，在这些行业，技术研发部门就是企业的主战场。在不少国企和政府部门，也非常重视科技和技术工作，例如，我所知道的广州市市政园林局，就设有总工程 师、副总工程师等技术职位，其中总工程师的职务级别相当于副局级，在这种氛围影响下，技术岗位人才和行政领导同样受人尊敬。所以，在一个尊重和重视技术工 作的行业和企业中，发展成为研发经理、技术总监或总工程师都是一个很好的选择。</p><p>　　方向四、做技术型销售和服务</p><p>　　技术工作的领域其实非常广泛，如果感觉纯技术工作发展潜力不大，可以考虑转向做销售或技术支持方面。华为、中兴等通信技术公司的销售人员，很少是不具 有专业技术背景的；甲骨文等软件巨头的市场推广，第一步常常是从销售工程师拜访客户开始的。这类高价值、高科技的产品销售推广，非常需要具有丰富技术经验 的销售人员。</p><p>　　技术人员转向售后服务，也是非常有前途的。我认识的一个朋友，大学是施工机械专业，毕业后一直在市政工程行业做非开挖顶管施工，在几年的工作中积累了 丰富的地下顶进设备的应用和维修经验，一个合适的机会跳槽到著名的顶管设备生产商－德国海瑞克公司，成为其售后服务工程师，工作上得心应手，收入也有了数 倍的增长。 </p><p>　　方向五、转向管理岗位</p><p>　　总有一些人，虽然是理工科出身、从事着技术岗位工作，但他们似乎天生就是具有管理天赋的人。这些人会在工作中逐步展现出管理潜质和优秀的领导能力，他 们往往更喜欢跟人打交道，更喜欢与外界沟通。在这种条件下，以技术经验为基础和依托，适当补充学习些管理方面的知识，例如可以在职攻读MBA，假以时日， 完全可以成长为出色的职业经理人。</p><p>　　方向六、高级技术操作人员</p><p>　　刚才所谈的职业发展方向，适用群体多为高校理工专业出身的人士，但对于数量众多的中等专科学校、技校毕业的一线技术工人来说，成为行业技术专家或研发总监的机会显然非常微小。这一群体的职业人士，最佳的技术发展路线是立足本职岗位，成为高级操作型技术人员。</p><p>　　广州市2006年出台的各类岗位工资指导价格中，高级技师就业的工资比博士还要高出500元。出现这一现象的原因很简单，从全国层面来说，产业工人数 量虽然巨大，但高级技工的比例却非常小，“高级技工”的缺乏已经成为制约许多企业发展的“瓶颈”。但随着政策环境、企业认识角度和培育机制方面的不断改 善，这一现象将逐步得到改变，所以成为中高级技师将是一个非常有前途的职业发展方向。</p><p>　　最后，我再次拿IT行业为例来具体谈谈技术人员的职业轨迹。</p><p>　　IT(Information Technology)行业的分类相当复杂，我这里仅仅分析最典型的三个部分:</p><p>　　第一部分是软件开发，通俗来说就是编程。实际上我认为真正的软件开发人员和制鞋工厂中的工人处在一个地位，是企业产品的最终生产者(当然这里没有贬义)。 </p><p>　　第二个部分是MIS: Management Information Service/System（管理信息系统），主要负责基础IT建设、网络、通讯、软硬件支持、简单开发等职能，为公司其他部门提供IT基础服务。</p><p>　　第三部分是ERP: Enterprise Resource Planning（企业资源计划系统），主要涉及企业管理类软件实施、维护、管理。通过是引入信息化手段在企业现实的实现企业的资源管理，协调企业各方面 的生产运作，它对业务的规范和企业的管理机制有很大的依赖。</p><p>　　让我们来分别看看这三部分人员的职业发展空间：</p><p>　　1. 开发人员</p><p>　　我的观点是，在中小企业做纯粹的软件开发很可能走上一条不归路，长期从事开发的人一般处世能力不足，升任管理人员的机会不大。而还有一个更重要的问题 是中国目前开发行业的环境很不好，正如我之前谈到的基本是在吃青春饭，30往后就很难做下去了。而在美国40岁的开发人员是正吃香的年龄。虽然可能业务越 来越精，但可能会离IT越来越远，向纯蓝领工人发展。</p><p>　　如果真的要做开发，应该找一个更好的平台，最好是进入跨国企业或国内龙头企业。如果数据方面的技术很强，可以考虑转向互联网搜索方向；如果在电子和通信设备方面有优势，可以从简单的程序开发转向通信产品的开发。</p><p>　　2. MIS人员</p><p>　　MIS内容广泛，可从事的职业很多:网管、技术支持等，而且通过努力可以得到提升成为小小的主管(当然要有自身的素质)，进而成为MIS Manager，但做到MIS Manager基本也就到头了，不过倒是可以考虑转到不同的行业或企业做MIS。</p><p>　　同样是做IT服务，在不同公司内IT部门的地位还是非常巨大的。就我所了解的，雅芳（中国）公司的IT部门就有100多人，在公司总部的各职能部门中 的地位相当高；而南方航空公司的IT部门竟然达到800多人，这个规模已经远远超过一般的IT公司，其IT部门的总裁也是公司决策层的重要成员。所以，在 这些公司内做IT技术支持工作，既避免了纯编程式的软件开发人员遇到的“人老珠黄”的被动局面，也不必担心IT产业泡沫破灭而产生的生存危机。</p><p>　　3. ERP类人员</p><p>　　从事企业管理类软件的人员一般起点比较高(公司的起点就比较高)，要求对财务、生产、销售等流程都有清楚地认识，从业人员不一定为IT出身，而有可能 是财务人员或理工科人员等转行而来。IT的迅速发展和企业经营领域的不断拓展，为ERP的推广和发展创造了良好的发展空间。事实上，一个从事企业管理类软 件的技术人员完全可以胜任一个企业的管理者，在这一领域技术人员的前景可以说是非常广阔的。</p><p>　　我认识的一位朋友，本科读的是工业装备控制专业，毕业后一直从事ERP方面的应用推广和管理咨询，虽然他对纯粹的IT技术了解并不是特别深刻，但在 ERP系统在企业中的应用方面经验非常丰富，在别人眼中他更像是一名管理咨询师，五年下来已经是这一领域的专家级人物，在个人收入方面也非常可观。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 综合技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术选型</title>
      <link href="/2018/06/18/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
      <url>/2018/06/18/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="做技术选型时，要注意些什么？"><a href="#做技术选型时，要注意些什么？" class="headerlink" title="做技术选型时，要注意些什么？"></a>做技术选型时，要注意些什么？</h1><p>对于技术选型，有些建议供你参考。此外，还有一个实践案例供你借鉴。</p><a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>对于一名热爱技术的工程师来说，很容易出现非常热衷于使用新技术的情况，记得有一次和一位做平台应用的同事闲聊，他问我最近在搞什么，我说在研究 Hadoop，正在用 MapReduce 处理海量图片的智能分析，他一脸羡慕：“能搞新技术，真好！”。</p><p>作为一名工程师，我可以理解大家的心情，我们都是热爱尝试新技术、抛弃过时技术的人。但是首先得明确，到底技术是不是过时的，还是仅仅是你认为它过时了。这篇文章我想谈谈我对技术选型的理解。</p><p>这篇文章不仅仅是写给工程师，更多是写给技术团队负责人（大多数也是从工程师升职上去的，起初思维和工程师差距不大），因为你们具体负责技术选型的方向、方法、过程、结论明确。</p><h1 id="技术选型的注意事项"><a href="#技术选型的注意事项" class="headerlink" title="技术选型的注意事项"></a>技术选型的注意事项</h1><p>先来看看软件开发领域的变化，变化实在是太快了。在 JavaScript 里，几乎每天都有新框架诞生。Node.js(关键词：事件编程），React 编程，Meteor.js（关键词：共享状态），前端 MVC，React.js…… 你可以随便举例。软件工程领域里新概念也层出不穷：领域驱动开发，六边形架构理论，DCI 架构（数据 - 场景 - 交互）。</p><p>洛克希德•马丁公司的著名飞机设计师凯利•约翰逊所提出的 KISS 原则，指出架构设计能简单绝不复杂，坚决砍掉任何华而不实的设计，不要因为 3 年后可能怎样甚至是一些现实中根本无法出现的场景，加入到当下的架构设计中，导致系统无比复杂。有时候看似引入的是一个很简单很容易解决的问题，可能在具体的执行过程中带来一系列不必要的麻烦。技术选型其实遇到的问题和系统架构设计类似，也容易出现人为因素导致的偏差，进而出现和系统架构过度设计类似的麻烦。</p><p>对于技术选型，有以下几个建议：</p><h1 id="选择你最熟悉的技术"><a href="#选择你最熟悉的技术" class="headerlink" title="选择你最熟悉的技术"></a>选择你最熟悉的技术</h1><p>记得看过一篇文章，里面提到一个新项目最好不要使用超过 30% 的新技术，我觉得这有一定道理，因为对于你完全不知道的技术，你不可能控制使用过程中出现的风险。我在技术管理中的向下管理里提起过，任何一位技术 Leader，如果你不能得到下属的技术尊重，你必将受到惩罚。</p><p>也不能说完全不能使用新技术，前几天和朋友聊天，他提到了另外一位总监下属有几个人转岗了，都是技术牛人，最主要的原因是这位总监坚决排斥新技术，坚持自己熟悉 的十年前的框架和编写代码规范。他对于一个新技术的天然不信任，在技术接受程度还不够高，并且认为公司内没有人能吃透这个技术的情况下，不愿意让自己的业务做第一个吃螃蟹的人，这种做法不能说完全错误，至少对于他自己来说很稳健，但是却压制了一些有追求人的内心。</p><p>谨慎是个美德，不过如果在一个非常追求速度的业务里，这可能也意味着过于保守，会延误时机。</p><p>那我们应该怎样做到选择技术呢？我认为，在选择技术时有两个大原则。第一，要取其长避其短；第二，要关注技术的发展前景。每种技术都是有它特定的适用场景，开发者经常犯的错误就是盲目追新，当一个新语言、框架、工具出现后，特别是开发者自己学会了这种新技术后，就会有种“拿着锤子找钉子”的感觉，将新技术滥用于各种项目。</p><p>记住，技术选型是稳定压倒一切。</p><h1 id="选择拥有强大社区支撑的开源技术"><a href="#选择拥有强大社区支撑的开源技术" class="headerlink" title="选择拥有强大社区支撑的开源技术"></a>选择拥有强大社区支撑的开源技术</h1><p>没有人喜欢“alone in the dark”的感觉，同样，也很少有工程师喜欢孤独地面对代码缺陷。我们之所以喜欢在 Apache 上挑选合适的新框架尝试使用，是因为 Apache 始终保持运作着强大的社区，每天都有很多新建的框架，也设计了一整套生命周期管理标准，让一个项目能够从孵化项目逐渐一步步地走向顶级项目。除了像 Apache 这样的社区，我们也可以评估是否存在一些商业公司提供针对该技术或者框架的有偿支撑，一般来说，有公司愿意围绕该技术布局，也能说明确实存在使用空间。例如 Apache Cassandra，目前就有 Datastax 和 LastPickle 两家公司对它提供技术指导和有偿辅助软件支撑。</p><p>其实看一项技术活不活跃，只要去 StackOverflow 这样的网站看看提问的人多不多就知道了。</p><h1 id="确保技术前进步伐"><a href="#确保技术前进步伐" class="headerlink" title="确保技术前进步伐"></a>确保技术前进步伐</h1><p>选择一个技术的最低标准是，技术的生命周期必须显著长于项目的生命周期。</p><p>为什么需要确保所选择的技术不断前进？因为这个世界是发展的，科技发展更是非常得快速，你可以看看，所有的成功的科技公司都是因为跑在了别人前面，而不是慢悠悠的工作态度，这就是科技界的残酷，也正是为什么 FaceBook 办公室里贴着：“要么做到最好，要么死亡”。</p><p>技术的前进不仅仅取决于它本身，而是和大环境发展、上下游用户也密切相关。比如 AI，60 年代其实就已经提出了相应概念，为什么直到今年才进入发展元年？因为芯片的计算效率、数据样本规模没有达到要求。而 Functional Language 为什么这么多年一直默默无闻，而从前几年开始逐渐盛行？因为机器学习来了，AI 来了，它们有了用武之地。</p><p>总的来说，你需要使用你所选择的软件技术，快速地实现应用程序的构建。记住一句话：好的技术栈永远跑在用户需求前面。</p><h1 id="学会从业务端开始思考"><a href="#学会从业务端开始思考" class="headerlink" title="学会从业务端开始思考"></a>学会从业务端开始思考</h1><p>技术选型必须贴着业务来选择，不同业务阶段会有不同的选型方式。处于初创期的业务，选型的基准是灵活。只要一个技术够用并且开发效率足够高，那么就可以选择它。初创的业务往往带有风险性和不确定性，朝令夕改、反复试错是常态，技术必须适应业务的节奏，然后才是其他方面。等业务进入稳定期，选型的基准是可靠。技术始终是业务的基石，当业务稳定了技术不稳，那就会成为业务的一块短板，就必须要修正。当业务进入维护期，选型的基准是妥协。代码永远有变乱的趋势，一般经过一两年就有必要对代码来一次大一点的重构。在这种时候，必须得正视各种遗留代码的迁移成本，如果改变技术选型会带来遗留代码重写，这背后带来的代价业务无法承受，那么我们就不得不考虑在现有技术选型之上做一些小修小补或者螺旋式上升的重构。</p><p>正因为技术选型和业务相关，我们能够观察到一些很明显的现象：新技术往往被早期创业团队或大公司的新兴业务使用；中大型公司的核心业务则更倾向于用一些稳定了几年的技术；一个公司如果长期使用一种技术，就会倾向于一直使用下去，甚至连版本都不更新的使用下去。这现象背后都是有道理的。</p><p>回到我们的主题，学会从业务端思考。首先我们需要充分地理解业务，理解用户需求，理解当下需要解决的首要问题，以及可能的风险有哪些，再将目标进行分解，进行具体的技术选型、模型设计、架构设计。</p><p>举个例子。假设我们需要解决的核心问题是并发，则可以通过各种缓存手段（本地缓存、分布式缓存），来提高查询的吞吐，这样虽然会一定程度上需要在数据一致性上做出牺牲，由强一致性变为最终一致性。</p><p>但是，如果数据一致性不是核心需要解决的问题，那么，此问题的优先级则可以先放一放，反过来如果核心问题变为数据的一致性，如交易系统，那么再怎么强调数据的一致性都不为过，由于分布式环境下为了应对高并发的写入以及海量数据的存储，通常需要对关系型数据库进行分库分表扩展，这也给数据一致性带来了很大的挑战，原本的单库事务的强一致性保障，在这个时候升级为跨库的分布式事务，而通过二阶段或者三阶段提交所保障的分布式事务，由于分布式事务管理器与资源管理器之间的多次网络通信成本，吞吐及效率上很难满足高并发场景下的要求，而这实际上对于交易系统来说，又是一个很难回避的问题。</p><p>因此，大家又想出很多的招来解决这个问题，通过可靠消息系统来保障不失为一种方式，变同步为异步，但是，又引入新的问题，消息系统为保证不丢消息，则很难保证消息的顺序性以及是否重复投递，这样作为消息的接收方，则需要保障消息处理的幂等性，以及对消息去重。</p><h1 id="先验证，后使用"><a href="#先验证，后使用" class="headerlink" title="先验证，后使用"></a>先验证，后使用</h1><p>对于未经验证的新技术、新理念的引入一定要慎重，一定要在全方位的验证过后，再大规模的使用。新技术、新理念的出现，自然有它的诱惑，慎重并不代表保守，技术总是在不断前进，拥抱变化本身没有问题，但是引入不成熟的技术看似能带来短期的收益，但是它的风险或者是后期的成本可能远远大于收益。</p><h1 id="重视经验"><a href="#重视经验" class="headerlink" title="重视经验"></a>重视经验</h1><p>技术选型是个很需要经验的活，得有大量的信息积累和输入，再根据具体现实情况输出一个结果。我们在选型的时候最忌讳的是临时抱佛脚、用网上收集一些碎片知识来决策，这是非常危险的，我们得确保自己所有思考都是基于以前的事实，还要弄清楚这些事实背后的假设，这都需要让知识内化形成经验。</p><p>经验的本质是什么，有什么方法能够确定自己的经验增长了，而不是不断在重复一些很熟悉的东西。我现在的结论是，经验等于知识索引的完备程度。</p><p>我们一生中会积累很多的知识，如果把我们的大脑比作数据库的话，那我们一定有一部分脑存储贡献给了内容的索引，它能帮助我们将关联知识更快的取出来，并且辅助决策。经验增长等同于我们知识索引的增长，意味着我们能轻易的调动更多的关联知识来做更全面的决策。</p><p>要想建立好这个知识索引，我们得保持技术敏感性和广度，也就是要做到持续的信息输入、内化，并发现信息之间的关联性，建立索引，记下来。说起来容易，做起来还是挺有难度的。</p><p>首先难在信息输入量大，忘记了怎么办。我们的大脑不是磁盘，不常用的知识就会忘记，忘记了就跟没看过是一回事。我的经验是一定要对知识进行压缩，记住的是最关键的细节，并且反复的去回味这个细节。</p><h1 id="我的实际案例"><a href="#我的实际案例" class="headerlink" title="我的实际案例"></a>我的实际案例</h1><p>去年我做了一次对于分布式数据库的选型工作。我们为什么要做这次选型？因为存在明确的需求，我们需要解决大规模高并发数据存储，单次数据不大，但是存储频率、读取频率都很高，并且要确保不丢失数据，这样的需求对于关系型数据库来说，出现了性能瓶颈。</p><p>我对于技术选型有自己的一套方法论，我知道，我不可能什么技术都懂，所以我会按照自己的这套方法论来具体执行，避免出现选型误差。我的步骤是：“列出需求”-“细分需求”-“明确搜索方向”-“网络搜索”-“明确评判标准”-“分头执行”-“汇总材料”-“初步选择”-“进一步调研”-“会议评审”-“做出决定”。这些步骤太多，需求我已经介绍了，这里具体再讲讲我这一次是如何进入下一步选型的，也就是“初步选择”-“进一步调研”之间的过程。</p><p>我通过网络搜索（进入 Google，搜索 Distributed Database、NoSQL Database 等关键词），我找到了如下这些国内外专家推荐的分布式数据库，他们的基本描述如下所示：</p><p>HyperTable： 一个开源、高性能、可伸缩的数据库，它采用与 Google 的 BigTable 相似的模型。该数据库数据按主键在物理上排序，适用于数据分析领域，采用 C++ 编写，可以运行在 HDFS 上面。该数据库受到 GPLV3 协议约束，考虑到它和 HBase 从系统架构上来说很相似，但是协议约束较多，所以放弃调研，转而调研 HBase。</p><p>HBase： 即 Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，采用主 / 从架构设计，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。它是 Google BigTable 的开源实现。</p><p>VoltDB： 一个内存数据库，提供了 NoSQL 数据库的可伸缩性和传统关系型数据库系统的 ACID 一致性，支持单节点 53000TPS/s。该数据库受到 GPLV3 协议约束。VoltDB 有两个版本，一个开源社区版本和一个付费企业版本。付费企业版本除包含了所有开源社区版的功能，还有些其他特点，诸如计算机集群管理控制台、系统性能仪表盘、数据库宕机恢复、在线数据库 Schema 修改、在线数据库节点重新加入、JDBC 和 OLAP 导出支持、命令日志。</p><p>由于该框架开源社区不活跃，主导者更加希望使用付费版本，所以决定放弃它，转而调研类似的 Redis。</p><p>CloudData： 一个结构化数据库，没有中文资料，从系统架构、功能上分析，类似于 MongoDB。</p><p>Gridool： 一种基于 MapReduce 原理设计的网格计算引擎，不支持数据存储，所以放弃。</p><p>Ddb-query-optimizer： 找不到资料，放弃。</p><p>Cages： 基于 ZooKeeper 实现数据协调 / 同步，不仅能性数据分布式存储，放弃。</p><p>Redis： 一个开源的基于键值对和存储系统，具备高性能特征。支持主从复制（master-slave replication），并且具有非常快速的非阻塞首先同步（non-blockingfirst synchronization）、网络断开自动重连等功能。同时 Redis 还具有其他一些特征，其中包括简单的 check-and-set 机制、pub/sub 和配置设置等，以便使得 Redis 能够表现得更像缓存（Cace）。绝大部分主流编程语言都有官方推荐的客户端。</p><p>MongoDB： 一个开源的 C++ 编写的面向集合且模式自由的文档性数据库，是 NoSQL 中功能最丰富、最像关系型数据库的产品。</p><p>核心优势：灵活文档模型 + 高可用复制集 + 可扩展分片集群；</p><p>功能特点：二级索引、地理位置索引、aggregate、map-reduce、OridFS 支持文件存储。</p><p>不足之处：不支持事务，仅支持简单 left join。</p><p>Spanner：Google 的可扩展的、多版本的、全球分布式的同步复制方式数据库。Spanner 是第一个支持全球规模的分布式数据、外部一致性分布式事务的分布式数据库。它是一个在遍布全球范围的数据中心内部通过多套 Paxos 状态机器共享数据的数据库。复制被用于全局可用性和地理位置；客户在副本之间自动切换。当数据量或者服务器数量发生变化时，Spanner 在机器之间自动共享数据，并且 Spanner 在机器之间自动迁移数据（甚至在数据中心之间），用以负载均衡和响应失败。Spanner 被设计为在几百万台机器之上横向扩展，这些扩展穿过了数百个数据中心和万亿行数据。功能很强大，可惜没有开源。</p><p>ElasticSearch： 一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 Restful Web 接口。ElasticSearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。</p><p>最终通过这些技术之间的互相相似度对比，并且我们设定了一些规则，例如开源协议的约束，这一点其实逐渐开始真正起到约束了，看看 FaceBook 针对 Reactor 的专利约束给大家造成的麻烦，你就懂了。最终，我选择了 Cassandra、MongoDB、Reddis、MySQL、HBase 等几款进入下一步深入调研。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>我们进行技术选型，有的团队会根据社交媒体上的讨论来决定选择哪种架构，有的团队会跟风走，哪个热门就选哪个，这些都不是正确的方式，我们应该按照方法论执行。此外，我们作为团队管理者，一边要督促自己不断学习新技术，自己能够上手使用，也要结合实际团队情况，规划新技术的预研、落地步骤，让团队成员既能享受到稳定技术的红利，也能不断地尝试新事物，让大家能够看到未来，不担心自己逐渐落后于行业的发展，更能提升对于公司的归属感。做到这些，真不容易，加油，诸位。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 综合技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2018/06/03/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/06/03/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h1><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p><a id="more"></a><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将方法getFullSingaporeCityData返回的数据适配到</span></span><br><span class="line"><span class="comment">* getSingaporeCityData的格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span></span>&#123;</span><br><span class="line">getSingaporeCityData() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">shenggang: &#123;</span><br><span class="line">id: <span class="string">'0001'</span>,</span><br><span class="line">coordinate: [<span class="number">1.3312</span>, <span class="number">103.32423</span>]</span><br><span class="line">&#125;,</span><br><span class="line">fenwei: &#123;</span><br><span class="line">id: <span class="string">'0002'</span>,</span><br><span class="line">coordinate: [<span class="number">1.3221</span>, <span class="number">103.1212</span>]</span><br><span class="line">&#125;,</span><br><span class="line">angmokio: &#123;</span><br><span class="line">id: <span class="string">'0003'</span>,</span><br><span class="line">coordinate: [<span class="number">1.654</span>, <span class="number">103.32465423</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">getFullSingaporeCityData() &#123;</span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'shenggang'</span>,</span><br><span class="line">id: <span class="string">'0001'</span>,</span><br><span class="line">coordinate: [<span class="number">1.3312</span>, <span class="number">103.32423</span>],</span><br><span class="line">peopleCount: <span class="number">10000</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'fenwei'</span>,</span><br><span class="line">id: <span class="string">'0002'</span>,</span><br><span class="line">coordinate: [<span class="number">1.3312</span>, <span class="number">103.32423</span>],</span><br><span class="line">peopleCount: <span class="number">20000</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'angmokio'</span>,</span><br><span class="line">id: <span class="string">'0003'</span>,</span><br><span class="line">coordinate: [<span class="number">1.3312</span>, <span class="number">103.32423</span>],</span><br><span class="line">peopleCount: <span class="number">30000</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataAdapter(fn) &#123;</span><br><span class="line"><span class="keyword">let</span> ret = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> list = fn();</span><br><span class="line">list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, k</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> &#123;name, ...props&#125; = v;</span><br><span class="line">ret[name] = &#123;...props&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态模式</title>
      <link href="/2018/05/26/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/26/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是状态模式"><a href="#什么是状态模式" class="headerlink" title="什么是状态模式"></a>什么是状态模式</h1><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p><p>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p><a id="more"></a><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicState</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(control) &#123;</span><br><span class="line"><span class="keyword">this</span>.control = control;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btnWasPressed(dom) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Basic function must be rewrite'</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">stopWasPressed(dom) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Basic function must be rewrite'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopState</span> <span class="keyword">extends</span> <span class="title">BasicState</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(control) &#123;</span><br><span class="line"><span class="keyword">super</span>(control);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btnWasPressed(dom) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'starting play'</span>);</span><br><span class="line">dom.innerText = <span class="string">'pause'</span>;</span><br><span class="line"><span class="keyword">this</span>.control.setState(<span class="keyword">this</span>.control.playState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stopWasPressed(dom) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stoped'</span>);</span><br><span class="line">dom.innerText = <span class="string">'start'</span>;</span><br><span class="line"><span class="keyword">this</span>.control.setState(<span class="keyword">this</span>.control.stopState);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayState</span> <span class="keyword">extends</span> <span class="title">BasicState</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(control) &#123;</span><br><span class="line"><span class="keyword">super</span>(control);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btnWasPressed(dom) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'paused'</span>);</span><br><span class="line">dom.innerText = <span class="string">'start'</span>;</span><br><span class="line"><span class="keyword">this</span>.control.setState(<span class="keyword">this</span>.control.pauseState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stopWasPressed(dom) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stoped'</span>);</span><br><span class="line">dom.innerText = <span class="string">'start'</span>;</span><br><span class="line"><span class="keyword">this</span>.control.setState(<span class="keyword">this</span>.control.stopState);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseState</span> <span class="keyword">extends</span> <span class="title">BasicState</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(control) &#123;</span><br><span class="line"><span class="keyword">super</span>(control);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btnWasPressed(dom) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'starting play'</span>);</span><br><span class="line">dom.innerText = <span class="string">'pause'</span>;</span><br><span class="line"><span class="keyword">this</span>.control.setState(<span class="keyword">this</span>.control.playState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stopWasPressed(dom) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stoped'</span>);</span><br><span class="line">dom.innerText = <span class="string">'start'</span>;</span><br><span class="line"><span class="keyword">this</span>.control.setState(<span class="keyword">this</span>.control.stopState);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Control</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.stopState = <span class="keyword">new</span> StopState(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.playState = <span class="keyword">new</span> PlayState(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.pauseState = <span class="keyword">new</span> PauseState(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.currentState = <span class="keyword">this</span>.stopState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setState(state) &#123;</span><br><span class="line"><span class="keyword">this</span>.currentState = state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰者模式</title>
      <link href="/2018/05/25/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/25/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是装饰者模式"><a href="#什么是装饰者模式" class="headerlink" title="什么是装饰者模式"></a>什么是装饰者模式</h1><a id="more"></a><h1 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Example 1</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforeFn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        beforeFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterFn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        afterFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Example 2</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _a = a;</span><br><span class="line"></span><br><span class="line">a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _a();</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Example 3</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onload = <span class="built_in">window</span>.onload;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    onload();</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/2018/05/22/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/22/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是中介者模式"><a href="#什么是中介者模式" class="headerlink" title="什么是中介者模式"></a>什么是中介者模式</h1><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p><a id="more"></a><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, teamColor, playerDirector) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.teamColor = teamColor;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'live'</span>;</span><br><span class="line">        <span class="keyword">this</span>.playerDirector = playerDirector;</span><br><span class="line">        <span class="keyword">this</span>.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    win() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'for self win action: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lose() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'for self lose action: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'for self add action: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">this</span>.playerDirector.recieveMessage(<span class="string">'add'</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'for self remove action: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">this</span>.playerDirector.recieveMessage(<span class="string">'remove'</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    die() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'for self die action: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">this</span>.playerDirector.recieveMessage(<span class="string">'die'</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getMessage(message) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> recieved message: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerMediator</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.players = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    recieveMessage(type, player) &#123;</span><br><span class="line">        <span class="keyword">this</span>[type](player);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(player) &#123;</span><br><span class="line">        <span class="keyword">this</span>.players[player.teamColor] = <span class="keyword">this</span>.players[player.teamColor] || [];</span><br><span class="line">        <span class="keyword">this</span>.players[player.teamColor].push(player);</span><br><span class="line">        <span class="keyword">this</span>.getAllPlayerExceptThis(player).forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">            p.getMessage(<span class="string">`player <span class="subst">$&#123;player.name&#125;</span> added.`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(player) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="keyword">this</span>.players[player.teamColor].indexOf(player);</span><br><span class="line">        <span class="keyword">this</span>.players[player.teamColor][index].status = <span class="string">'disconnect'</span>;</span><br><span class="line">        <span class="keyword">this</span>.getAllPlayerExceptThis(player).forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">            p.getMessage(<span class="string">`player <span class="subst">$&#123;player.name&#125;</span> disconnected.`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.verifyOver(player.teamColor)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.gameOver(player.teamColor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    die(player) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="keyword">this</span>.players[player.teamColor].indexOf(player);</span><br><span class="line">        <span class="keyword">this</span>.players[player.teamColor][index].status = <span class="string">'die'</span>;</span><br><span class="line">        <span class="keyword">this</span>.getAllPlayerExceptThis(player).forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">            p.getMessage(<span class="string">`player <span class="subst">$&#123;player.name&#125;</span> dead.`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.verifyOver(player.teamColor)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.gameOver(player.teamColor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getAllPlayerExceptThis(player) &#123;</span><br><span class="line">        <span class="keyword">let</span> ret = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> t <span class="keyword">of</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.players)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> <span class="keyword">this</span>.players[t]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (player !== p) &#123;</span><br><span class="line">                    ret.push(p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    verifyOver(teamColor) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> player <span class="keyword">of</span> <span class="keyword">this</span>.players[teamColor]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (player.status === <span class="string">'live'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gameOver(teamColor) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> t <span class="keyword">of</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.players)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> player <span class="keyword">of</span> <span class="keyword">this</span>.players[t]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (teamColor === player.teamColor) &#123;</span><br><span class="line">                    player.lose();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    player.win();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职责链模式</title>
      <link href="/2018/05/21/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/21/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是职责链模式"><a href="#什么是职责链模式" class="headerlink" title="什么是职责链模式"></a>什么是职责链模式</h1><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Vip5</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.level = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getDiscount(pay, level) &#123;</span><br><span class="line">        <span class="keyword">if</span> (level === <span class="keyword">this</span>.level) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(pay * <span class="number">0.5</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.nextChain.getDiscount(pay, level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setNextChain(obj) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nextChain = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Vip3</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.level = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getDiscount(pay, level) &#123;</span><br><span class="line">        <span class="keyword">if</span> (level === <span class="keyword">this</span>.level) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(pay * <span class="number">0.7</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.nextChain.getDiscount(pay, level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setNextChain(obj) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nextChain = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Vip1</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.level = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getDiscount(pay, level) &#123;</span><br><span class="line">        <span class="keyword">if</span> (level === <span class="keyword">this</span>.level) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(pay * <span class="number">0.9</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.nextChain.getDiscount(pay, level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setNextChain(obj) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nextChain = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> order = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (orderType === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pay === <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'500元定金预购，得到100优惠券'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'普通购买'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ordertype === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pay === <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'200元定金预购，得到50元优惠券'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'普通购买'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType === <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'普通购买'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Chain = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fn = fn;</span><br><span class="line">        <span class="keyword">this</span>.successor = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Chain.prototype.setNextSuccessor = <span class="function"><span class="keyword">function</span> (<span class="params">successor</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Chain.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.successor &amp;&amp; <span class="keyword">this</span>.successor.passRequest.apply(<span class="keyword">this</span>.successor, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'500元定金预购，得到100元优惠券'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'200元定金预购，得到50元优惠券'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'普通购买，无优惠券'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        order(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);</span><br><span class="line">        <span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> Chain(order500);</span><br><span class="line">        <span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> Chain(order200);</span><br><span class="line">        <span class="keyword">var</span> chainOrderNomal = <span class="keyword">new</span> Chain(orderNormal);</span><br><span class="line"></span><br><span class="line">        chainOrder500.setNextSuccessor(chainOrder200);</span><br><span class="line">        chainOrder200.setNextSuccessor(chainOrderNomal);</span><br><span class="line">        chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    init();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/2018/05/19/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/19/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是享元模式"><a href="#什么是享元模式" class="headerlink" title="什么是享元模式"></a>什么是享元模式</h1><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><a id="more"></a><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.divPool = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createDiv(text, parent) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.divPool.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`get from pool, pool count:<span class="subst">$&#123;<span class="keyword">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">let</span> div = <span class="keyword">this</span>.divPool.shift();</span><br><span class="line">div.innerText = text;</span><br><span class="line">parent.appendChild(div);</span><br><span class="line"><span class="keyword">return</span> div;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`create a new div, because pool count:<span class="subst">$&#123;<span class="keyword">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">div.innerText = text;</span><br><span class="line">parent.appendChild(div);</span><br><span class="line"><span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">removeDiv(node, parent) &#123;</span><br><span class="line">parent.removeChild(node);</span><br><span class="line"><span class="keyword">this</span>.recover(node);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`when ui remove div, restore this div, now pool has: <span class="subst">$&#123;<span class="keyword">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">recover(node) &#123;</span><br><span class="line"><span class="keyword">this</span>.divPool.push(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> circleFactory = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> circlePool = [];</span><br><span class="line">        <span class="keyword">var</span> parent = <span class="built_in">document</span>.querySelector(<span class="string">'.flyweight-body'</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            create: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (circlePool.length !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> circlePool.shift();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">                    div.setAttribute(<span class="string">'class'</span>, <span class="string">'flyweight-child'</span>);</span><br><span class="line">                    parent.appendChild(div);</span><br><span class="line">                    <span class="keyword">return</span> div;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            recover: <span class="function"><span class="keyword">function</span> (<span class="params">dom</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> circlePool.push(dom);</span><br><span class="line">            &#125;,</span><br><span class="line">            remove: <span class="function"><span class="keyword">function</span> (<span class="params">oldPool</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oldPool.length; i++) &#123;</span><br><span class="line">                    parent.removeChild(oldPool[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> renderCircle = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> circlePool = [];</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'length: '</span> + circlePool.length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; number.length; j++) &#123;</span><br><span class="line">                circleFactory.recover(circlePool.pop());</span><br><span class="line">                circlePool.length = circlePool.length - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'length: '</span> + circlePool.length);</span><br><span class="line">            circleFactory.remove(circlePool);</span><br><span class="line">            circlePool = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> circle = circleFactory.create();</span><br><span class="line">                circle.style.left = <span class="built_in">Math</span>.random() * <span class="number">700</span> + <span class="string">'px'</span>;</span><br><span class="line">                circle.style.top = <span class="built_in">Math</span>.random() * <span class="number">400</span> + <span class="string">'px'</span>;</span><br><span class="line">                circlePool.push(circle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Event.listen(<span class="string">'draw-circle'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> number = <span class="built_in">Number</span>(args.number);</span><br><span class="line">            <span class="built_in">console</span>.log(number);</span><br><span class="line">            renderCircle(number);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/2018/05/17/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/17/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是模板方法模式"><a href="#什么是模板方法模式" class="headerlink" title="什么是模板方法模式"></a>什么是模板方法模式</h1><p>假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。</p><a id="more"></a><p>在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。</p><p>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。</p><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderDom</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createDom() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must need implement createDom function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    configStyle() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must need implement configStyle function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    appendToParent() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must need implement appendToParent function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderDiv</span> <span class="keyword">extends</span> <span class="title">RenderDom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createDom() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'div created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> renderDom = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> createDom = obj.createDom || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must need implement createDom function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> configStyle = obj.configStyle || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must need implement configStyle function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> appendToParent = obj.appendToParent || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must need implement appendToParent function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    F.prototype.createDom = createDom;</span><br><span class="line">    F.prototype.configStyle = configStyle;</span><br><span class="line">    F.prototype.appendToParent = appendToParent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/2018/05/16/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/16/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是命令模式"><a href="#什么是命令模式" class="headerlink" title="什么是命令模式"></a>什么是命令模式</h1><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。</p><p>调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><a id="more"></a><p>命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenderLogin</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.login = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">this</span>.options = &#123;</span><br><span class="line">width: <span class="string">'100px'</span>,</span><br><span class="line">height: <span class="string">'100px'</span>,</span><br><span class="line">border: <span class="string">'1px solid red'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(options) &#123;</span><br><span class="line"><span class="keyword">this</span>.options = &#123;...this.options, ...options&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.options)) &#123;</span><br><span class="line"><span class="keyword">this</span>.login.style[key] = <span class="keyword">this</span>.options[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.login);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">remove() &#123;</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(<span class="keyword">this</span>.login);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenderLoginCommand</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.renderLogin = <span class="keyword">new</span> RenderLogin();</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">excute(reciever) &#123;</span><br><span class="line"><span class="keyword">this</span>.renderLogin.render(reciever.options);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">undo() &#123;</span><br><span class="line"><span class="keyword">this</span>.renderLogin.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginButton</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.options = &#123;</span><br><span class="line">background: <span class="string">'grey'</span>,</span><br><span class="line">borderRadius: <span class="string">'50%'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.renderLoginCommand = <span class="keyword">new</span> RenderLoginCommand();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2018/05/13/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/13/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h1><p>具体写法： 使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。</p><p>订阅前发布： 在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。</p><a id="more"></a><p>命名空间： 如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。</p><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.topicMapping = &#123;&#125;;</span><br><span class="line"><span class="keyword">this</span>.publishStore = &#123;&#125;;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">subscribe(...args) &#123;</span><br><span class="line"><span class="keyword">let</span> topic = args.shift();</span><br><span class="line"><span class="keyword">let</span> callback = args.shift();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.topicMapping[topic]) &#123;</span><br><span class="line"><span class="keyword">this</span>.topicMapping[topic] = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.topicMapping[topic].push(callback);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`subscribed topic <span class="subst">$&#123;topic&#125;</span>`</span>);</span><br><span class="line"><span class="comment">//check if had subscribed</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.publishStore[topic]) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`trigger topic <span class="subst">$&#123;topic&#125;</span> immediately`</span>);</span><br><span class="line"><span class="keyword">this</span>.publish(topic, <span class="keyword">this</span>.publishStore[topic]);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>.publishStore[topic];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">publish(...args) &#123;</span><br><span class="line"><span class="keyword">let</span> topic = args.shift();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.topicMapping[topic]) &#123;</span><br><span class="line"><span class="keyword">this</span>.topicMapping[topic].forEach(<span class="function">(<span class="params">v, k</span>) =&gt;</span> &#123;</span><br><span class="line">v.apply(<span class="literal">null</span>, args);</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`no topic: <span class="subst">$&#123;topic&#125;</span> has been subscribed, this publish will store here, after subscribe, will trigger`</span>);</span><br><span class="line"><span class="keyword">this</span>.publishStore[topic] = args;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">unsubscribe(...args) &#123;</span><br><span class="line"><span class="keyword">let</span> topic = args.shift();</span><br><span class="line"><span class="keyword">let</span> callback = args.shift();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.topicMapping[topic]) &#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>.topicMapping[topic];</span><br><span class="line"><span class="keyword">if</span> (callback <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">callback(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`no topic <span class="subst">$&#123;topic&#125;</span> has been subscribe, so no need unsubscribe.`</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Observer;</span><br></pre></td></tr></table></figure><h1 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.Event = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> clientList = &#123;&#125;,</span><br><span class="line">            offline = &#123;&#125;,</span><br><span class="line">            listen,</span><br><span class="line">            trigger,</span><br><span class="line">            remove;</span><br><span class="line">            </span><br><span class="line">        listen = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!clientList[key]) &#123;</span><br><span class="line">                clientList[key] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            clientList[key].push(fn);</span><br><span class="line">            <span class="keyword">if</span> (offline[key]) &#123;</span><br><span class="line">                fn.apply(<span class="keyword">this</span>, offline[key].shift());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        trigger = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">                fns = clientList[key];</span><br><span class="line">            <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!offline[key]) &#123;</span><br><span class="line">                    offline[key] = [];</span><br><span class="line">                &#125;</span><br><span class="line">                offline[key].push(<span class="built_in">arguments</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = fns.length; i &lt; len; i++) &#123;</span><br><span class="line">                fns[i].apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line">            <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">                fns.length = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = fns.length; i &lt; len; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">                    <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">                        fns.splice(i, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            listen: listen,</span><br><span class="line">            trigger: trigger,</span><br><span class="line">            remove: remove,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Event.trigger(<span class="string">'loaded'</span>, &#123;</span><br><span class="line">            name: <span class="string">'renhongl'</span>,</span><br><span class="line">            age: <span class="number">18</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            Event.listen(<span class="string">'loaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(args);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2018/05/12/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/12/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是迭代器模式"><a href="#什么是迭代器模式" class="headerlink" title="什么是迭代器模式"></a>什么是迭代器模式</h1><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p><p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。</p><a id="more"></a><p>外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。</p><p>中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux</title>
      <link href="/2018/05/10/redux/"/>
      <url>/2018/05/10/redux/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Redux"><a href="#什么是Redux" class="headerlink" title="什么是Redux"></a>什么是Redux</h1><ul><li>在Flux基础上的改进框架。</li><li>单向数流。</li><li>唯一数据源。</li><li>保持状态只读。</li><li>数据改变只能通过纯函数完成。</li></ul><a id="more"></a><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flux</title>
      <link href="/2018/05/10/flux/"/>
      <url>/2018/05/10/flux/</url>
      
        <content type="html"><![CDATA[<h1 id="Flux是什么？"><a href="#Flux是什么？" class="headerlink" title="Flux是什么？"></a>Flux是什么？</h1><ul><li>一种架构思想。</li><li>专门解决软件的结构问题。</li></ul><a id="more"></a><h1 id="传统MVC"><a href="#传统MVC" class="headerlink" title="传统MVC"></a>传统MVC</h1><p><img src="https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react-mvc.png" alt=""></p><h1 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h1><p><img src="https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react.png" alt=""></p><p>由图可见，Flux是单向数据流动。</p><ol><li>用户访问View</li><li>View发出Action</li><li>派发器发出Action, 要去Store进行更新</li><li>Store更新数据, 提醒View需要更新页面</li><li>View更新页面</li></ol><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Flux将应用分成四个部分。</p><ul><li>View: 视图层</li><li>Action: 动作，视图层发出的消息，比如鼠标点击</li><li>Dispatcher: 派发器，用来接收Actions，执行回调函数</li><li>Store: 数据层，用来存放应用的状态，一旦发生改变，就提醒View更新页面</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2018/05/06/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/06/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h1><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</p><p>代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。</p><p>虚拟代理：例如实现图片预加载、合并http请求。</p><p>缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。</p><a id="more"></a><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadImage</span></span>&#123;</span><br><span class="line">    setUrl(url, target) &#123;</span><br><span class="line">        target.src = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadImageProxy</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.loadImage = <span class="keyword">new</span> LoadImage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setUrl(url, target) &#123;</span><br><span class="line">        <span class="keyword">this</span>.loadImage.setUrl(<span class="string">'./image/p2.gif'</span>, target);</span><br><span class="line">        <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.loadImage.setUrl(url, target);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadData</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = &#123;</span><br><span class="line">            renhong: &#123;</span><br><span class="line">                name: <span class="string">'renhongl'</span>,</span><br><span class="line">                age: <span class="number">18</span></span><br><span class="line">            &#125;,</span><br><span class="line">            mogu: &#123;</span><br><span class="line">                name: <span class="string">'mogu'</span>,</span><br><span class="line">                age: <span class="number">19</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    load(name, callback) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            callback(<span class="keyword">this</span>.data[name]);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadDataProxy</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.loadData = <span class="keyword">new</span> LoadData();</span><br><span class="line">        <span class="keyword">this</span>.cache = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    load(name, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.cache[name]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.loadData.load(name, (data) =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.cache[name] = data;</span><br><span class="line">                callback(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callback(<span class="keyword">this</span>.cache[name]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用虚拟代理实现图片预加载</span></span><br><span class="line"><span class="comment"> * 使用缓存代理实现ajax异步请求数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> logoImg = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> logo = <span class="built_in">document</span>.querySelector(<span class="string">'.logo'</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            setSrc: <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    logo.src = src;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> proxyLogoImg = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            logoImg.setSrc(<span class="keyword">this</span>.src);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            setSrc: <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">                logoImg.setSrc(<span class="string">'./loading.png'</span>);</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    img.src = src;</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fetchData = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            start: <span class="function"><span class="keyword">function</span> (<span class="params">url, fn</span>) </span>&#123;</span><br><span class="line">                fetch(url).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">                        response.json().then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                fn.call(<span class="keyword">this</span>, data);</span><br><span class="line">                            &#125;, <span class="number">2000</span>);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(err);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> proxyFetchData = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            start: <span class="function"><span class="keyword">function</span> (<span class="params">url, fn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> key = url.split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (key <span class="keyword">in</span> cache) &#123;</span><br><span class="line">                    fn.call(<span class="keyword">this</span>, cache[key]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fetchData.start(url, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                        cache[key] = data;</span><br><span class="line">                        fn.call(<span class="keyword">this</span>, data);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fetchDataAction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.time(<span class="string">'fetchData'</span>);</span><br><span class="line">        proxyFetchData.start(<span class="string">'./1.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            <span class="built_in">console</span>.timeEnd(<span class="string">'fetchData'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        proxyLogoImg.setSrc(<span class="string">'./logo.png'</span>);</span><br><span class="line">        fetchDataAction();</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fetchDataAction();</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2018/05/05/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/05/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是策略模式"><a href="#什么是策略模式" class="headerlink" title="什么是策略模式"></a>什么是策略模式</h1><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。</p><p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。</p><p>策略模式可以消除程序中大片的条件分支语句。</p><a id="more"></a><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LevelA</span></span>&#123;</span><br><span class="line">    calculate(salary) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LevelB</span></span>&#123;</span><br><span class="line">    calculate(salary) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LevelC</span></span>&#123;</span><br><span class="line">    calculate(salary) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">GetBonus</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.calculateMapping = &#123;</span><br><span class="line">            A: <span class="keyword">new</span> LevelA(),</span><br><span class="line">            B: <span class="keyword">new</span> LevelB(),</span><br><span class="line">            C: <span class="keyword">new</span> LevelC()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    calculate(type, salary) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.calculateMapping[type].calculate(salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用策略模式实现表单验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> strategies = &#123;</span><br><span class="line">        isNotEmpty: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> errorMsg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        minLength: <span class="function"><span class="keyword">function</span> (<span class="params">value, length, errorMsg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">                <span class="keyword">return</span> errorMsg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        isMobile: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> errorMsg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        isNumber: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="built_in">Number</span>(value))) &#123;</span><br><span class="line">                <span class="keyword">return</span> errorMsg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> registerForm = <span class="built_in">document</span>.querySelector(<span class="string">'form'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = [];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Validator.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">dom, rule, errorMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = rule.split(<span class="string">':'</span>);</span><br><span class="line">        <span class="keyword">this</span>.cache.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> strategy = arr.shift();</span><br><span class="line">            arr.unshift(dom.value);</span><br><span class="line">            arr.push(errorMsg);</span><br><span class="line">            <span class="keyword">return</span> strategies[strategy].apply(dom, arr)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Validator.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.cache.length; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> msg = <span class="keyword">this</span>.cache[i]();</span><br><span class="line">            <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">                <span class="keyword">return</span> msg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> validataFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line">        validator.add(registerForm.number, <span class="string">'isNotEmpty'</span>, <span class="string">'数量不能为空'</span>);</span><br><span class="line">        validator.add(registerForm.number, <span class="string">'isNumber'</span>, <span class="string">'请输入数字'</span>);</span><br><span class="line">        validator.add(registerForm.number, <span class="string">'minLength:2'</span>, <span class="string">'数量至少要2位字符'</span>);</span><br><span class="line">        <span class="keyword">var</span> errorMsg = validator.start();</span><br><span class="line">        <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.submitBtn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> errorMsg = validataFunc();</span><br><span class="line">            <span class="keyword">if</span> (errorMsg) &#123;</span><br><span class="line">                alert(errorMsg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Event.trigger(<span class="string">'draw-circle'</span>, &#123;<span class="attr">number</span>: registerForm.number.value&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2018/04/29/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/29/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h1><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。</p><a id="more"></a><h1 id="面向对象例子："><a href="#面向对象例子：" class="headerlink" title="面向对象例子："></a>面向对象例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下是基本实现方法，但是并没有实现：</span></span><br><span class="line"><span class="comment">//并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开</span></span><br><span class="line"><span class="comment">//这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。"</span></span><br><span class="line"><span class="comment">//的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDOM</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.createDOM = <span class="keyword">new</span> CreateDOM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    create() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.instance = <span class="keyword">this</span>.createDOM.create();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateDOM</span></span>&#123;</span><br><span class="line">    create(type) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.createElement(type || <span class="string">'div'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateButton</span></span>&#123;</span><br><span class="line">    create() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用管理单例的类。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">GetSingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(ClassName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = <span class="keyword">new</span> ClassName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    create() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.instance = <span class="keyword">this</span>.obj.create();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用单例模式实现一个登陆框。</span></span><br><span class="line"><span class="comment"> * 包含一个智能命令模式，即可以直接实现请求的命令，不需要接收者的存在。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createLoginDiv = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div;</span><br><span class="line">        div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        div.setAttribute(<span class="string">'class'</span>, <span class="string">'login'</span>);</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>).appendChild(div);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> child = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        child.setAttribute(<span class="string">'class'</span>, <span class="string">'login-child'</span>);</span><br><span class="line">        child.innerText = <span class="string">'Login Dialog'</span>;</span><br><span class="line">        div.appendChild(child);</span><br><span class="line">        <span class="keyword">return</span> div;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createLoginButton = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> button;</span><br><span class="line">        button = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">        button.type = <span class="string">'button'</span>;</span><br><span class="line">        button.value = <span class="string">'login'</span>;</span><br><span class="line">        button.setAttribute(<span class="string">'class'</span>, <span class="string">'loginBtn'</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>).appendChild(button);</span><br><span class="line">        <span class="keyword">return</span> button;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> single;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> single || (single = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createSingleLogin = getSingle(createLoginDiv);</span><br><span class="line">    <span class="keyword">var</span> createSingleLoginButton = getSingle(createLoginButton);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> openLoginDivCommand = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> loginDiv = createSingleLogin();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            excute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                loginDiv.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.target.getAttribute(<span class="string">'class'</span>) !== <span class="string">'login-child'</span>) &#123;</span><br><span class="line">                        macroCommand.undo();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                loginDiv.style.display = <span class="string">'flex'</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            undo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                loginDiv.style.display = <span class="string">'none'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> clearInputCommand = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span><br><span class="line">        <span class="keyword">var</span> cache;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            excute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                cache = input.value;</span><br><span class="line">                input.value = <span class="string">''</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            undo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                input.value = cache;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> macroCommand = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> commandList = [];</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            add: <span class="function"><span class="keyword">function</span> (<span class="params">command</span>) </span>&#123;</span><br><span class="line">                commandList.push(command);</span><br><span class="line">            &#125;,</span><br><span class="line">            excute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = commandList.length; i &lt; len; i++) &#123;</span><br><span class="line">                    commandList[i].excute();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            undo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = commandList.length; i &lt; len; i++) &#123;</span><br><span class="line">                    commandList[i].undo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            redo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                macroCommand.excute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    macroCommand.add(openLoginDivCommand);</span><br><span class="line">    macroCommand.add(clearInputCommand);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> loginButton = createSingleLoginButton();</span><br><span class="line">        loginButton.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            macroCommand.excute();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            macroCommand.redo();</span><br><span class="line">        &#125;, <span class="number">10000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2018/04/27/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/27/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是原型模式"><a href="#什么是原型模式" class="headerlink" title="什么是原型模式"></a>什么是原型模式</h2><p>类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。</p><p>原型模式不但是一种设计模式，也被称为一种编程泛型。</p><a id="more"></a><p>ECMAScript5提供了Object.create方法，可以用来克隆对象。</p><p>但是create方法性能不如 var obj = {} 或者 var obj = new Object();</p><p>以上两种替代方式，内部都是克隆原型而得到对象。</p><p><strong>注：</strong> Javascript中的根对象是Object，所有的对象都从根对象克隆而来。</p><h2 id="函数式例子："><a href="#函数式例子：" class="headerlink" title="函数式例子："></a>函数式例子：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用原型继承方式实现一个模板方法模式。</span></span><br><span class="line"><span class="comment"> * 通过设置钩子方法，可以实现不同的子类使用不同的父类约束。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    Beverage.prototype.boilWater = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'把水煮沸。'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Beverage.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写冲泡方法'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Beverage.prototype.poutInCup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写把饮料倒入杯子方法'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Beverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写加调料方法'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Beverage.prototype.customerAddCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Beverage.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boilWater();</span><br><span class="line">        <span class="keyword">this</span>.brew();</span><br><span class="line">        <span class="keyword">this</span>.poutInCup();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.customerAddCondiments()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.addCondiments();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    Coffee.prototype = <span class="keyword">new</span> Beverage();</span><br><span class="line"></span><br><span class="line">    Coffee.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'冲泡咖啡'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Coffee.prototype.poutInCup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Coffee.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'给咖啡加糖加牛奶'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Coffee.prototype.customerAddCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.confirm(<span class="string">'请问需要调料吗？'</span>);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">    coffee.init();</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年学习计划</title>
      <link href="/2018/02/09/2018-plan/"/>
      <url>/2018/02/09/2018-plan/</url>
      
        <content type="html"><![CDATA[<h1 id="2018学习计划"><a href="#2018学习计划" class="headerlink" title="2018学习计划"></a>2018学习计划</h1><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript:"></a>Javascript:</h2><ul><li style="list-style: none"><input type="checkbox" checked> Javascript标准参考教程</li><li style="list-style: none"><input type="checkbox" checked> JavaScript设计模式与开发实践</li><li style="list-style: none"><input type="checkbox" checked> Javascript编程精解</li><li style="list-style: none"><input type="checkbox" checked> ES6</li></ul><a id="more"></a><h2 id="Python"><a href="#Python" class="headerlink" title="Python:"></a>Python:</h2><ul><li style="list-style: none"><input type="checkbox" checked> python基础(廖雪峰网络教程)</li><li style="list-style: none"><input type="checkbox" checked> 精通python网络爬虫</li><li style="list-style: none"><input type="checkbox"> python爬虫开发与项目实战</li><li style="list-style: none"><input type="checkbox" checked> django(网络教程)</li><li style="list-style: none"><input type="checkbox" checked> flask web开发实战</li></ul><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs:"></a>Nodejs:</h2><ul><li style="list-style: none"><input type="checkbox"> <del>nodejs权威指南</del></li></ul><h2 id="React"><a href="#React" class="headerlink" title="React:"></a>React:</h2><ul><li style="list-style: none"><input type="checkbox" checked> react英文官网</li><li style="list-style: none"><input type="checkbox" checked> 深入浅出react和redux</li><li style="list-style: none"><input type="checkbox" checked> react redux</li><li style="list-style: none"><input type="checkbox" checked> react router</li><li style="list-style: none"><input type="checkbox" checked> redux thunk</li><li style="list-style: none"><input type="checkbox" checked> redux saga</li><li style="list-style: none"><input type="checkbox" checked> react jest</li></ul><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack:"></a>Webpack:</h2><ul><li style="list-style: none"><input type="checkbox" checked> webpack英文官网</li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux:"></a>Linux:</h2><ul><li style="list-style: none"><input type="checkbox"> linux shell编程从初学到精通</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构:"></a>架构:</h2><ul><li style="list-style: none"><input type="checkbox"> 软件架构设计</li></ul><h2 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理:"></a>项目管理:</h2><ul><li style="list-style: none"><input type="checkbox" checked> 事业发展</li><li style="list-style: none"><input type="checkbox" checked> 技术选型</li></ul><h2 id="英语"><a href="#英语" class="headerlink" title="英语:"></a>英语:</h2><ul><li style="list-style: none"><input type="checkbox"> 使用百词斩，每天背25个单词</li><li style="list-style: none"><input type="checkbox"> 使用流利说每天听说30分钟</li></ul><h2 id="2018目标"><a href="#2018目标" class="headerlink" title="2018目标:"></a>2018目标:</h2><ul><li style="list-style: none"><input type="checkbox" checked> 完成基于原生js的 UI插件Mr UI开发</li><li style="list-style: none"><input type="checkbox"> <del>使用python django为Mr UI开发后台</del></li><li style="list-style: none"><input type="checkbox"> 使用python flask开发简书后台</li><li style="list-style: none"><input type="checkbox"> 使用python爬虫为简书项目挖取数据</li><li style="list-style: none"><input type="checkbox"> <del>对node有全面深入的理解</del></li><li style="list-style: none"><input type="checkbox" checked> 对react及redux有全面深入的理解</li><li style="list-style: none"><input type="checkbox"> 熟练使用python编写各种爬虫</li><li style="list-style: none"><input type="checkbox" checked> 熟练掌握es6, es7语法</li><li style="list-style: none"><input type="checkbox"> 正常无抵触的阅读全英文文档</li><li style="list-style: none"><input type="checkbox" checked> 学会使用Axure设计原型</li><li style="list-style: none"><input type="checkbox"> 使用react, redux, router, saga模仿开发简书网站</li><li style="list-style: none"><input type="checkbox"> 使用python为简书网站做后台</li></ul><h2 id="技术提升计划"><a href="#技术提升计划" class="headerlink" title="技术提升计划"></a>技术提升计划</h2><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ol><li><p>前端开发技能：</p><ol><li>Javascript编程精解（熟悉Javascript基础知识）</li><li>Javascript设计模式（提升Javascirpt编程能力）</li><li>React and Redux（掌握一门流行框架）</li></ol></li><li><p>程序员基础技能：</p><ol><li>高级语言程序设计（Javascript加一门后端语言）</li><li>数据结构</li><li>算法分析与设计</li></ol></li><li><p>良好的编码习惯：</p><ol><li>阅读几篇和编程语言相关的编码规范</li></ol></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>锻炼思维</li><li>在掌握基础技能的基础上，在leetcode练习算法</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的扩展</title>
      <link href="/2017/07/18/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/"/>
      <url>/2017/07/18/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h1><p>Array.from()方法用于将<strong>类似数组的对象</strong>和<strong>可遍历的对象</strong>转为真正的数组。</p><p><strong>而扩展运算符只能将部署了Iterator接口的对象（可遍历对象）转换成数组。</strong></p><a id="more"></a><p>可转换对象包括：</p><ol><li>类数组对象DOM集合</li><li>类数组对象arguments</li><li>部署了Iterator接口的Set和Map</li></ol><h1 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h1><p>Array.of()方法用于将一组值转换为数组。因为数组的构造函数Array()在传入一个或多个参数时，创建的行为有差异。</p><h1 id="find-方法和findIndex-方法"><a href="#find-方法和findIndex-方法" class="headerlink" title="find()方法和findIndex()方法"></a>find()方法和findIndex()方法</h1><p>用于找出第一个符合条件的数组成员，它的第一个参数是回调函数，可用于自定义查找方法。第二个参数可用于绑定this。它们都可以发现NaN，用于替代indexOf。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>);<span class="comment">//-1</span></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n));<span class="comment">//0</span></span><br></pre></td></tr></table></figure><h1 id="keys-values-和entries-方法"><a href="#keys-values-和entries-方法" class="headerlink" title="keys(),values()和entries()方法"></a>keys(),values()和entries()方法</h1><p>用于返回遍历器对象，可以使用for…of循环遍历。默认调用values()方法返回遍历器对象。</p><h1 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h1><p>用于表示某个数组是否包含给定值，可用于代替indexOf(),在不需要回调函数增加查找条件时，用includes()代替findIndex()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值的扩展</title>
      <link href="/2017/07/16/%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/"/>
      <url>/2017/07/16/%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="使用0b和0o表示二进制和八进制"><a href="#使用0b和0o表示二进制和八进制" class="headerlink" title="使用0b和0o表示二进制和八进制"></a>使用0b和0o表示二进制和八进制</h1><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b111</span> === <span class="number">7</span>;</span><br><span class="line"><span class="number">0o10</span> === <span class="number">8</span>;</span><br></pre></td></tr></table></figure><h1 id="Number新API"><a href="#Number新API" class="headerlink" title="Number新API"></a>Number新API</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite();</span><br><span class="line"><span class="built_in">Number</span>.isNaN();</span><br><span class="line"><span class="built_in">Number</span>.parseInt();</span><br><span class="line"><span class="built_in">Number</span>.parseFloat();</span><br><span class="line"><span class="built_in">Number</span>.isInteger();</span><br><span class="line"><span class="built_in">Number</span>.isSafeInteget();</span><br></pre></td></tr></table></figure><h1 id="Math扩展API"><a href="#Math扩展API" class="headerlink" title="Math扩展API"></a>Math扩展API</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(); <span class="comment">//去除一个数的小数部分，返回整数部分。</span></span><br><span class="line"><span class="built_in">Math</span>.sign(); <span class="comment">//整数返回1，负数返回-1,0返回0，-0返回-0，其他返回NaN</span></span><br><span class="line"><span class="built_in">Math</span>.cbrt(); <span class="comment">//计算立方根</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量的解构赋值</title>
      <link href="/2017/07/15/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2017/07/15/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol><li>基本用法： <code>let [a, b, c] = [1, 2, 3]</code></li><li>默认值：<code>let [ n = 1] = []</code></li><li>解构不成功，变量的值等于undefined</li></ol><a id="more"></a><h1 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h1><ol><li>基本用法：<code>let {foo, bar} = {foo: &#39;aaa&#39;, bar: &#39;bbb&#39;}</code></li><li>默认值：<code>let {x = 3} = {x: undefined}</code></li><li>默认值生效的条件是对象的属性值严格等于undefined</li></ol><h1 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h1><ol><li>基本用法：<code>cosnt [a, b, c, d, e] = &#39;hello&#39;</code> //a = ‘h’, b = ‘e’</li></ol><h1 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h1><ol><li><p>交换变量的值： </p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">[x, y ] = [y, x]</span><br></pre></td></tr></table></figure></li><li><p>从函数返回多个值：</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure></li><li><p>定义函数参数：</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>提取JSON数据：</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  id: <span class="number">42</span>,</span><br><span class="line">  status: <span class="string">"OK"</span>,</span><br><span class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, status, number);</span><br><span class="line"><span class="comment">// 42, "OK", [867, 5309]</span></span><br></pre></td></tr></table></figure></li><li><p>遍历map结构：</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span><br><span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Symbol</title>
      <link href="/2017/07/14/Symbol/"/>
      <url>/2017/07/14/Symbol/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Symbol"><a href="#什么是Symbol" class="headerlink" title="什么是Symbol"></a>什么是Symbol</h1><p>Symbol是ES6引入的一种新的原始数据类型，表示独一无二的值。它是JavaScript语言的第七种数据类型:</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span>, <span class="literal">undefined</span>, <span class="built_in">String</span>, <span class="built_in">Number</span>, <span class="built_in">Boolean</span>, <span class="built_in">Object</span>, <span class="built_in">Symbol</span>。</span><br></pre></td></tr></table></figure><p>使用Symbol()函数生成，因为它是一种类似字符串的数据类型，所以不是通过new创建的对象实例。</p><ul><li><p>作为属性名，在混合两个对象时，属性值不会被覆盖，因为一个Symbol是唯一的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义属性名和使用属性名时，使用方括号的调用方式。</span></span><br><span class="line"><span class="keyword">let</span> myNameSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [myNameSymbol]: <span class="string">'renhongl'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a[myNameSymbol];<span class="comment">//renhongl</span></span><br></pre></td></tr></table></figure></li><li><p>定义常量，消灭模式字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">operator</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'add'</span>:<span class="comment">//魔术字符串</span></span><br><span class="line">    <span class="comment">//do add</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"> <span class="comment">/*---more code----*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">operator(<span class="string">'add'</span>);<span class="comment">//魔术字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//not bad</span></span><br><span class="line"><span class="keyword">var</span> operatorType = &#123;</span><br><span class="line">  add: <span class="string">'add'</span>,</span><br><span class="line">  update: <span class="string">'update'</span>,</span><br><span class="line">  remove: <span class="string">'remove'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">operator</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">    <span class="keyword">case</span> operatorType.add:<span class="comment">//魔术字符串</span></span><br><span class="line">    <span class="comment">//do add</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"> <span class="comment">/*---more code----*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">operator(operatorType.add);</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为我们不关心add之后是什么值，可以使用一些方式</span></span><br><span class="line"><span class="comment">//good</span></span><br><span class="line"><span class="keyword">var</span> operatorType = &#123;</span><br><span class="line">  add: <span class="built_in">Symbol</span>(),</span><br><span class="line">  update: <span class="built_in">Symbol</span>(),</span><br><span class="line">  remove: <span class="built_in">Symbol</span>(),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">operator</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">    <span class="keyword">case</span> operatorType.add:<span class="comment">//魔术字符串</span></span><br><span class="line">    <span class="comment">//do add</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"> <span class="comment">/*---more code----*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">operator(operatorType.add);</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set 和 Map</title>
      <link href="/2017/07/13/Set%E5%92%8CMap/"/>
      <url>/2017/07/13/Set%E5%92%8CMap/</url>
      
        <content type="html"><![CDATA[<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>类似于数组的数据结构，成员的值都是<strong>唯一</strong>的。</p><a id="more"></a><ol><li><p>基本写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set =  <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure></li><li><p>数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line">a = [...new <span class="built_in">Set</span>(a)];<span class="comment">//[1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>实例的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">a.add(<span class="number">1</span>).add(<span class="number">3</span>).add(<span class="number">10</span>);</span><br><span class="line">a.size;<span class="comment">//3</span></span><br><span class="line">a.has(<span class="number">10</span>);<span class="comment">//true</span></span><br><span class="line">a.delete(<span class="number">10</span>);</span><br><span class="line">a.has(<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line">a.clear();</span><br><span class="line">a.size;<span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>遍历操作</p><ul><li>keys(): 返回键名的遍历器</li><li>values(): 返回键值得遍历器</li><li>entries(): 返回键值对的遍历器</li><li>forEach(): 使用回调函数遍历每个成员</li></ul></li></ol><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>解决Object只能使用字符串当做键的问题。</p><p>如果需要键值对的数据结构，Map比Object更合适。</p><ol><li><p>基本写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'lrh'</span>],</span><br><span class="line">  [<span class="string">'age'</span>, <span class="number">18</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(items);</span><br></pre></td></tr></table></figure></li><li><p>实例的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">map.size;<span class="comment">//2</span></span><br><span class="line">map.set(<span class="string">'gender'</span>, <span class="string">'male'</span>).set(<span class="string">'experience'</span>, <span class="number">3</span>);</span><br><span class="line">map.get(<span class="string">'gender'</span>);<span class="comment">//male</span></span><br><span class="line">map.has(<span class="string">'experience'</span>);<span class="comment">//true</span></span><br><span class="line">map.delete(<span class="string">'age'</span>)<span class="comment">//true</span></span><br><span class="line">map.clear();</span><br><span class="line">map.size;<span class="comment">//0</span></span><br></pre></td></tr></table></figure></li><li><p>遍历操作</p><ul><li><p>keys()</p></li><li><p>values()</p></li><li><p>entries() 默认的遍历器接口</p></li><li><p>forEach()</p><p>​</p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async 和 await</title>
      <link href="/2017/07/12/async%E5%92%8Cawait/"/>
      <url>/2017/07/12/async%E5%92%8Cawait/</url>
      
        <content type="html"><![CDATA[<ol><li>基本用法</li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getPersonInformation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> obj;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'before get'</span>);</span><br><span class="line">  <span class="keyword">await</span> getPerson().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">      obj = data;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'after get '</span> + obj.name + <span class="string">' information'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p = &#123;</span><br><span class="line">          name: <span class="string">'lrh'</span>,</span><br><span class="line">          age: <span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line">      resolve(p)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getPersonInformation();</span><br></pre></td></tr></table></figure><a id="more"></a><p>   ​</p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generator函数</title>
      <link href="/2017/07/10/Generator/"/>
      <url>/2017/07/10/Generator/</url>
      
        <content type="html"><![CDATA[<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hwg = helloWorldGenerator();</span><br><span class="line">hwg.next();<span class="comment">//&#123;value: 'hello', done: false&#125;</span></span><br><span class="line">hwg.next();<span class="comment">//&#123;value: 'world', done: false&#125;</span></span><br><span class="line">hwg.next();<span class="comment">//&#123;value: 'ending',  done: true&#125;</span></span><br><span class="line">hwg.nexe();<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的扩展</title>
      <link href="/2017/06/22/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/"/>
      <url>/2017/06/22/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="属性，方法的简洁写法"><a href="#属性，方法的简洁写法" class="headerlink" title="属性，方法的简洁写法"></a>属性，方法的简洁写法</h1><ul><li>属性名为变量名，属性值为变量值。</li></ul><a id="more"></a>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'lrh'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于方法返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'lrh'</span>;</span><br><span class="line">  <span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;name, age&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法的简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">'lrh'</span>,</span><br><span class="line">    age,</span><br><span class="line">    getName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="属性名可以使用表达式"><a href="#属性名可以使用表达式" class="headerlink" title="属性名可以使用表达式"></a>属性名可以使用表达式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5定义对象的属性</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">'lrh'</span>;</span><br><span class="line">person.[<span class="string">'a'</span> + <span class="string">'ge'</span>] = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5使用字面量定义属性时，只有下面一种方式</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'lrh'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6可以使用表达式为对象字面量定义属性</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'lrh'</span>,</span><br><span class="line">  [<span class="string">'a'</span> + <span class="string">'ge'</span>]: <span class="number">18</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用Object-is-方法比较两个值相等"><a href="#使用Object-is-方法比较两个值相等" class="headerlink" title="使用Object.is()方法比较两个值相等"></a>使用Object.is()方法比较两个值相等</h1><ul><li>相等运算符（==）会自动转换数据类型。</li><li>严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。</li><li><p>Object.is()方法与严格相等基本一致，并弥补了以上两个不足。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>;</span><br><span class="line">+<span class="number">0</span> === <span class="number">-0</span>;</span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>);</span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="使用Object-assign-方法浅拷贝对象"><a href="#使用Object-assign-方法浅拷贝对象" class="headerlink" title="使用Object.assign()方法浅拷贝对象"></a>使用Object.assign()方法浅拷贝对象</h1><ul><li><p>将源对象合并到目标对象</p></li><li><p>如果有同名属性，源对象的属性会覆盖掉目标对象的属性。</p></li><li><p>该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target;<span class="comment">//&#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>常见用途</p><ol><li><p>为对象添加属性</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;name, age&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li>为对象添加方法</li></ol><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;name, age&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="built_in">Object</span>.assign(Person.prototype, &#123;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;,</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">      </span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">18</span>).getName();<span class="comment">//lrh</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li><p>克隆对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'lrh'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">Object</span>.assign(&#123;&#125;, person);<span class="comment">//&#123; name: 'lrh', age: 18 &#125;</span></span><br><span class="line"><span class="built_in">Object</span>.is(person, p);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source1 = &#123;<span class="attr">name</span>: <span class="string">'lrh'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123;<span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">Object</span>.assign(&#123;&#125;, source1, source2);<span class="comment">//&#123; name: 'lrh', age: 18 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>为属性指定默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  container: <span class="string">'#wrap'</span>,</span><br><span class="line">  draggable: <span class="literal">true</span>,</span><br><span class="line">  resizable: <span class="literal">true</span>,</span><br><span class="line">  blinkTime: <span class="number">4000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Draggable</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">const</span> DEFAULT = &#123;</span><br><span class="line">      container: <span class="string">''</span>,</span><br><span class="line">      draggable: <span class="literal">true</span>,</span><br><span class="line">      resizable: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULT, options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h1 id="遍历属性"><a href="#遍历属性" class="headerlink" title="遍历属性"></a>遍历属性</h1><ul><li><p>for…in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;name, age&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">'Person'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">18</span>, <span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//name</span></span><br><span class="line"><span class="comment">//age</span></span><br><span class="line"><span class="comment">//gender</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person.hasOwnProperty(p)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//name</span></span><br><span class="line"><span class="comment">//age</span></span><br></pre></td></tr></table></figure></li><li><p>Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type = <span class="built_in">Symbol</span>(<span class="string">'type'</span>);</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'lrh'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  [type]: <span class="string">'Student'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(person);<span class="comment">//['name', 'age']</span></span><br></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(arr);<span class="comment">//['0', '1', '2', 'length']</span></span><br></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。</p></li><li><p>Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。</p></li><li><p>ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'lrh'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(person);<span class="comment">//[ 'name', 'age' ]</span></span><br><span class="line"><span class="built_in">Object</span>.values(person);<span class="comment">//[ 'lrh', 18 ]</span></span><br><span class="line"><span class="built_in">Object</span>.entries(person);<span class="comment">//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己实现entries()方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">entries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> personEntries = entries(person);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">of</span> personEntries) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[ 'name', 'lrh' ]</span></span><br><span class="line"><span class="comment">//[ 'age', 18 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器</span></span><br><span class="line"><span class="built_in">Object</span>.assign(person, &#123;</span><br><span class="line">  * [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">yield</span> [key, <span class="keyword">this</span>[key]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entries <span class="keyword">of</span> person) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entries);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[ 'name', 'lrh' ]</span></span><br><span class="line"><span class="comment">//[ 'age', 18 ]</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="使用扩展运算符"><a href="#使用扩展运算符" class="headerlink" title="使用扩展运算符"></a>使用扩展运算符</h1><ul><li><p>扩展运算符是用于操作数组的</p></li><li><p>ES2018将这个运算符引入到了对象中</p></li><li><p>用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'lrh'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> p = &#123;...person, <span class="attr">type</span>: <span class="string">'student'</span>&#125;;</span><br><span class="line">p;<span class="comment">//&#123; name: 'lrh', age: 18, type: 'student' &#125;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2017/06/20/Promise/"/>
      <url>/2017/06/20/Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h1><p>Promise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。</p><p><strong>通过异步操作的结果，决定它是哪种状态。</strong></p><p><strong>pending —&gt; fulfilled   或者 pending —&gt; rejected</strong></p><a id="more"></a><ul><li><p>基本使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'data loaded'</span>);</span><br><span class="line">        resolve(<span class="string">'get '</span> + url + <span class="string">' data successfully'</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(<span class="string">'test.json'</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>异步加载图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadImage = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">      img.onerror = reject;</span><br><span class="line">      img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="string">'img loaded'</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      img.src = url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgURL = <span class="string">'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&amp;fm=27&amp;gp=0.jpg'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = <span class="string">'loading...'</span>;</span><br><span class="line">loadImage(imgURL).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  img.style.width = <span class="string">'100px'</span>;</span><br><span class="line">  img.style.height = <span class="string">'100px'</span>;</span><br><span class="line">  img.src = imgURL;</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML = <span class="string">''</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Ajax请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">    <span class="keyword">const</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">'GET'</span>, url);</span><br><span class="line">    client.responseType = <span class="string">'json'</span>;</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">    client.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(<span class="string">'test.json'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getData(<span class="string">'test.json'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Promise.all()用于将多个Promise实例，包装成一个新的Promise实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><ol><li>p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。</li><li>p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。</li></ol></li><li><p>Promise.race()也是将多个Promise实例包装成一个新的Promise实例</p><ol><li>p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>let和const</title>
      <link href="/2017/06/18/let%E5%92%8Cconst/"/>
      <url>/2017/06/18/let%E5%92%8Cconst/</url>
      
        <content type="html"><![CDATA[<h1 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h1><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p><p>为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><a id="more"></a><h1 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h1><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。<br>在代码块内，使用let命令声明变量之前，该变量都是不可用的。</p><h1 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h1><p>不允许在相同作用域内，重复声明同一个变量。</p><h1 id="ES6-的块级作用域"><a href="#ES6-的块级作用域" class="headerlink" title="ES6 的块级作用域"></a>ES6 的块级作用域</h1><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p><ul><li>第一种场景，内层变量可能会覆盖外层变量。</li><li><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。</p><p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p><p>如果真的想将对象冻结，应该使用Object.freeze方法。</p><p>对象及其属性冻结：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> constantize = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach( <span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ) &#123;</span><br><span class="line">        constantize( obj[key] );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="顶层对象"><a href="#顶层对象" class="headerlink" title="顶层对象"></a>顶层对象</h1><ol><li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li><li>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。</li><li>Node 里面，顶层对象是global，但其他环境都不支持。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span></span><br><span class="line">    ? <span class="built_in">window</span></span><br><span class="line">    : (<span class="keyword">typeof</span> process === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">        <span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">'function'</span> &amp;&amp;</span><br><span class="line">        <span class="keyword">typeof</span> global === <span class="string">'object'</span>)</span><br><span class="line">        ? global</span><br><span class="line">        : <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法二</span></span><br><span class="line">    <span class="keyword">var</span> getGlobal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> self; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> <span class="built_in">window</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> global !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> global; &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unable to locate global object'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterator和for...of</title>
      <link href="/2017/06/16/Iterator%E5%92%8Cfor...of/"/>
      <url>/2017/06/16/Iterator%E5%92%8Cfor...of/</url>
      
        <content type="html"><![CDATA[<h1 id="Iterator（遍历器）"><a href="#Iterator（遍历器）" class="headerlink" title="Iterator（遍历器）"></a>Iterator（遍历器）</h1><p>为各种不同的数据结构提供统一的访问机制。</p><p>任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</p><p>遍历操作：依次处理该数据结构的所有成员。</p><a id="more"></a><h1 id="遍历过程"><a href="#遍历过程" class="headerlink" title="遍历过程"></a>遍历过程</h1><ol><li><p>创建一个指针对象，指向当前数据结构的起始位置。</p></li><li><p>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</p></li><li><p>第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。</p></li><li><p>不断调用指针对象的next方法，直到它指向数据结构的结束位置。</p><p>​</p></li></ol><h1 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h1><p>使用for…of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。</p><p>默认的遍历器接口部署在数据结构的Symbol.iterator属性上。</p><p>即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。</p><p>Symbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。</p><h1 id="原生具备Iterator接口的数据结构"><a href="#原生具备Iterator接口的数据结构" class="headerlink" title="原生具备Iterator接口的数据结构"></a>原生具备Iterator接口的数据结构</h1><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>arguments</li><li>NodeList</li></ul><h1 id="除了for…of，其他会调用默认遍历器接口的情况"><a href="#除了for…of，其他会调用默认遍历器接口的情况" class="headerlink" title="除了for…of，其他会调用默认遍历器接口的情况"></a>除了for…of，其他会调用默认遍历器接口的情况</h1><ol><li>结构赋值</li><li>扩展运算符</li><li>yield*</li><li>Array.from()</li><li>Map(), Set(), WeakMap(), WeakSet()</li><li>Promise.all()</li><li>Promise.race()</li></ol><h1 id="Iterator接口最简单实现"><a href="#Iterator接口最简单实现" class="headerlink" title="Iterator接口最简单实现"></a>Iterator接口最简单实现</h1><p>为Symbol.iterator创建一个Generator函数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class</title>
      <link href="/2017/06/14/Class/"/>
      <url>/2017/06/14/Class/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Class"><a href="#什么是Class" class="headerlink" title="什么是Class"></a>什么是Class</h1><p>Javascript没有类的概念，要生成一个实例对象，是通过构造函数。</p><a id="more"></a><h1 id="传统写法："><a href="#传统写法：" class="headerlink" title="传统写法："></a>传统写法：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.name + <span class="string">', '</span> + <span class="keyword">this</span>.age + <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">18</span>);</span><br><span class="line">p.toString();<span class="comment">//"(lrh, 18)"</span></span><br><span class="line">p.getName();<span class="comment">//"lrh"</span></span><br></pre></td></tr></table></figure><h1 id="使用ES6的Class语法"><a href="#使用ES6的Class语法" class="headerlink" title="使用ES6的Class语法:"></a>使用ES6的Class语法:</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.name + <span class="string">', '</span> + <span class="keyword">this</span>.age + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">19</span>);</span><br><span class="line">p.toString();<span class="comment">//"(lrh, 18)"</span></span><br><span class="line">p.getName();<span class="comment">//"lrh"</span></span><br></pre></td></tr></table></figure><h1 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法:"></a>私有方法:</h1><ol><li><p>使用<strong>下划线</strong>“ _ “区别方法名，但是外部还是可以调用这个方法。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  _getAge() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getInfor() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">', '</span> + <span class="keyword">this</span>._getAge();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">18</span>);</span><br><span class="line">p.getInfor();<span class="comment">//"lrh, 18"</span></span><br></pre></td></tr></table></figure></li><li><p>将私有方法移出类，因为在类中方法都是对外可见的。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getInfor() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">', '</span> + getAge.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">19</span>);</span><br><span class="line">p.getInfor();</span><br><span class="line">p.getAge();<span class="comment">//TypeError: p.getAge is not a function</span></span><br></pre></td></tr></table></figure></li><li><p>利用Symbol的唯一性，设置私有变量。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getAge = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  [getAge]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getInfor() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">', '</span> + <span class="keyword">this</span>[getAge]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">18</span>);</span><br><span class="line">p.getInfor();</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h1 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h1><ol><li><p>使用#表示，但是还只是提案，babel都不支持。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  #type = 'Student';</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getInfor() &#123;</span><br><span class="line">    return this.name + ', ' + this.age + ', ' + this.#type; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">18</span>);</span><br><span class="line">p.getInfor();</span><br></pre></td></tr></table></figure></li></ol><h1 id="取值函数（getter）和存值函数（setter）"><a href="#取值函数（getter）和存值函数（setter）" class="headerlink" title="取值函数（getter）和存值函数（setter）"></a>取值函数（getter）和存值函数（setter）</h1><ol><li><p>拦截了该属性的存取行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age, gender) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>._gender = gender;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get gender() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getter'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._gender;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  set gender(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter'</span>);</span><br><span class="line">    <span class="keyword">this</span>._gender = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>, <span class="number">18</span>, <span class="string">'male'</span>);</span><br><span class="line">p.gender;</span><br><span class="line">p.gender = <span class="string">'female'</span>;</span><br><span class="line">p.gender;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><ol><li><p>在方法前加上static关键字，this指向类而不是实例。只能通过类调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> getRandom() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.getRandom();<span class="comment">//0.36116181991876695</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="静态属性与实例属性"><a href="#静态属性与实例属性" class="headerlink" title="静态属性与实例属性"></a>静态属性与实例属性</h1><ol><li><p>是ES7的提案，需要安装ES7的转码：<code>npm install --save-dev babel-preset-stage-2</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  type = <span class="string">'Student'</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Person();<span class="comment">//Student</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> type = <span class="string">'Student'</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Person.type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Person();<span class="comment">//Student</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rest参数和扩展运算符</title>
      <link href="/2017/06/12/rest%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2017/06/12/rest%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是rest参数"><a href="#什么是rest参数" class="headerlink" title="什么是rest参数"></a>什么是rest参数</h1><p>用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。</p><p>语法：<code>...args</code></p><a id="more"></a><ul><li><p>利用rest参数，可以向函数传入任意数量的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> args) &#123;</span><br><span class="line">    total += key;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>);<span class="comment">//16</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">1</span>);<span class="comment">//4</span></span><br></pre></td></tr></table></figure></li><li><p>使用rest参数代替arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumbers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).sort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumbers</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  args.sort();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rest参数之后不能再有参数，即rest参数只能是最后一个参数</p></li></ul><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><ul><li><p>好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：<code>...[arr]</code></p><p><strong>在圆括号中成为参数序列：（…[1, 2, 3, 4]）=&gt; (1, 2, 3, 4) </strong></p><p><strong>在方括号中成为新数组：[1, 2, …[3, 4, 5]] =&gt; [1, 2, 3, 4, 5]</strong></p></li><li><p>可以用来替代函数的apply方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f.apply(<span class="literal">null</span>, args);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> args = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">f(...args);</span><br></pre></td></tr></table></figure></li><li><p>求数组最大值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">23</span>, <span class="number">12</span>, <span class="number">54</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="built_in">Math</span>.max((...[<span class="number">23</span>, <span class="number">12</span>, <span class="number">54</span>]));</span><br><span class="line"><span class="comment">//等同于求max方法的参数的最大值</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">23</span>, <span class="number">12</span>, <span class="number">54</span>)</span><br></pre></td></tr></table></figure></li><li><p>将一个数组的所有元素一次添加到另一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, ar2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。</span></span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure></li><li><p>复制数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1.concat();</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];<span class="comment">//创建了新数组，填入了a1的所有项</span></span><br></pre></td></tr></table></figure></li><li><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].concat(more);</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more];</span><br><span class="line">[...arr1, ...arr2, ...arr3];</span><br></pre></td></tr></table></figure></li><li><p>将实现了Iterator接口的对象，转化为数组</p></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类数组对象</span></span><br><span class="line"><span class="keyword">let</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">let</span> arr1 = [...nodeList];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="string">'length'</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arrayLike];<span class="comment">// TypeError: Cannot spread non-iterable object.</span></span><br><span class="line"><span class="comment">//arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组</span></span><br></pre></td></tr></table></figure><ul><li><p>Map和Set也实现了Iterator接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">0</span>, <span class="string">'a'</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="string">'b'</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">'c'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">let</span> arr1 = [...map.keys()];<span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [...map.values()];<span class="comment">//[a, b, c]</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [...map.entries()];<span class="comment">//[[1, 'a'], [2, 'b'], [3, 'c']]</span></span><br></pre></td></tr></table></figure></li><li><p>Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...go()]<span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack全面理解</title>
      <link href="/2017/05/05/webpack%E5%85%A8%E9%9D%A2%E7%90%86%E8%A7%A3/"/>
      <url>/2017/05/05/webpack%E5%85%A8%E9%9D%A2%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h1><p>Webpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。</p><a id="more"></a><h1 id="Entry-Points"><a href="#Entry-Points" class="headerlink" title="Entry Points"></a>Entry Points</h1><p>入口点，就是打包的起始文件。有多种定义方式。</p><ol><li><p>单入口，使用字符串:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></li><li><p>多入口，使用对象语法：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">        vendors: <span class="string">'./src/vendors.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。</p><ol><li><p>基本用法:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        path: <span class="string">'/home/proj/public/assets'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></li><li><p>多入口点的用法:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">        search: <span class="string">'./src/search.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// writes to disk: ./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h1><p>装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。</p><ol><li><p>安装: <code>npm install --save-dev style-loader css-loader</code></p></li><li><p>配置:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">            modules: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><p>插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。</p><ol><li><p>插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。</p></li><li><p>基本用法：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//installed via npm</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); </span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">//to access built-in plugins</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'my-first-webpack.bundle.js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">            use: <span class="string">'babel-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></li><li><p>常用插件：</p><ul><li><p>html-webpack-plugin（输出控制的插件）</p><ol><li>安装: <code>npm install --save-dev html-webpack-plugin</code></li><li>配置: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">+ <span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">+   plugins: [</span><br><span class="line">+     <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">+       title: <span class="string">'Output Management'</span></span><br><span class="line">+     &#125;)</span><br><span class="line">+   ],</span><br><span class="line">    output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。</li></ol></li><li><p>clean-webpack-plugin(清理/dist文件夹)</p><ol><li>安装: <code>npm install --save-dev clen-webpack-plugin</code></li><li><p>配置：</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"> + <span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">                entry: &#123;</span><br><span class="line">                app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">                print: <span class="string">'./src/print.js'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                plugins: [</span><br><span class="line">        + <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">                  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                      title: <span class="string">'Output Management'</span></span><br><span class="line">                  &#125;)</span><br><span class="line">                ],</span><br><span class="line">                output: &#123;</span><br><span class="line">                filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">                path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;;</span><br></pre></td></tr></table></figure></li><li><p>结论：创建之后，不会再有旧文件，只有刚生成的文件。</p></li></ol></li><li><p>uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)</p><ol><li>安装: <code>npm install --save-dev uglifyjs-webpack-plugin</code></li><li><p>配置:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">+ <span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    - &#125;</span><br><span class="line">    + &#125;,</span><br><span class="line">    + plugins: [</span><br><span class="line">    +   <span class="keyword">new</span> UglifyJSPlugin()</span><br><span class="line">    + ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。</p></li></ol></li><li><p>CommonsChunkPlugin(代码分裂插件)</p><ol><li>安装: 属于webpack内建插件</li><li><p>配置: </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">+ <span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    another: <span class="string">'./src/another-module.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">        title: <span class="string">'Code Splitting'</span></span><br><span class="line">-     &#125;)</span><br><span class="line">+     &#125;),</span><br><span class="line">+     <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">+       name: <span class="string">'common'</span> <span class="comment">// Specify the common bundle's name.</span></span><br><span class="line">+     &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。</p></li></ol></li></ul></li></ol><h1 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h1><p>开发时，我们需要做一些设置，使开发变得容易。</p><ol><li><p>Using source maps</p><ul><li>描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。</li><li><p>配置: </p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">+   devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: <span class="string">'Development'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>结论: 在devtool属性中配置 <code>inline-source-map</code>之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。</li></ol></li><li><p>Using Watch Mode</p><ul><li>描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。</li><li><p>配置: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    +<span class="string">"watch"</span>: <span class="string">"webpack --watch"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。</p></li></ul></li><li><p>Using webpack-dev-server</p><ul><li>描述: 提供一个简单的web服务器，并且能够自动刷新页面。</li><li>安装: <code>npm install --save-dev webpack-dev-server</code></li><li><p>配置: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">+   devServer: &#123;</span><br><span class="line">+     contentBase: <span class="string">'./dist'</span></span><br><span class="line">+   &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: <span class="string">'Development'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>添加npm执行脚本: <code>&quot;start&quot;: &quot;webpack-dev-server --open&quot;</code></li></ul></li></ul></li></ol><h1 id="Production"><a href="#Production" class="headerlink" title="Production"></a>Production</h1><p>如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。</p><ol><li>安装: <code>npm install --save-dev webpack-merge</code></li><li><p>配置:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">project: </span><br><span class="line"></span><br><span class="line">    webpack-demo</span><br><span class="line">    |- package.json</span><br><span class="line">    - |- webpack.config.js</span><br><span class="line">    + |- webpack.common.js</span><br><span class="line">    + |- webpack.dev.js</span><br><span class="line">    + |- webpack.prod.js</span><br><span class="line">    |- <span class="regexp">/dist</span></span><br><span class="line"><span class="regexp">    |- /</span>src</span><br><span class="line">        |- index.js</span><br><span class="line">        |- math.js</span><br><span class="line">    |- <span class="regexp">/node_modules</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">webpack.common.js</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    + const path = require('path');</span></span><br><span class="line"><span class="regexp">    + const CleanWebpackPlugin = require('clean-webpack-plugin');</span></span><br><span class="line"><span class="regexp">    + const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"><span class="regexp">    +</span></span><br><span class="line"><span class="regexp">    + module.exports = &#123;</span></span><br><span class="line"><span class="regexp">    +   entry: &#123;</span></span><br><span class="line"><span class="regexp">    +     app: './</span>src/index.js<span class="string">'</span></span><br><span class="line"><span class="string">    +   &#125;,</span></span><br><span class="line"><span class="string">    +   plugins: [</span></span><br><span class="line"><span class="string">    +     new CleanWebpackPlugin(['</span>dist<span class="string">']),</span></span><br><span class="line"><span class="string">    +     new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="string">    +       title: '</span>Production<span class="string">'</span></span><br><span class="line"><span class="string">    +     &#125;)</span></span><br><span class="line"><span class="string">    +   ],</span></span><br><span class="line"><span class="string">    +   output: &#123;</span></span><br><span class="line"><span class="string">    +     filename: '</span>[name].bundle.js<span class="string">',</span></span><br><span class="line"><span class="string">    +     path: path.resolve(__dirname, '</span>dist<span class="string">')</span></span><br><span class="line"><span class="string">    +   &#125;</span></span><br><span class="line"><span class="string">    + &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">webpack.dev.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    + const merge = require('</span>webpack-merge<span class="string">');</span></span><br><span class="line"><span class="string">    + const common = require('</span>./webpack.common.js<span class="string">');</span></span><br><span class="line"><span class="string">    +</span></span><br><span class="line"><span class="string">    + module.exports = merge(common, &#123;</span></span><br><span class="line"><span class="string">    +   devtool: '</span>inline-source-map<span class="string">',</span></span><br><span class="line"><span class="string">    +   devServer: &#123;</span></span><br><span class="line"><span class="string">    +     contentBase: '</span>./dist<span class="string">'</span></span><br><span class="line"><span class="string">    +   &#125;</span></span><br><span class="line"><span class="string">    + &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">webpack.prod.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    + const merge = require('</span>webpack-merge<span class="string">');</span></span><br><span class="line"><span class="string">    + const webpack = require('</span>webpack<span class="string">');</span></span><br><span class="line"><span class="string">    + const UglifyJSPlugin = require('</span>uglifyjs-webpack-plugin<span class="string">');</span></span><br><span class="line"><span class="string">    + const common = require('</span>./webpack.common.js<span class="string">');</span></span><br><span class="line"><span class="string">    +</span></span><br><span class="line"><span class="string">    + module.exports = merge(common, &#123;</span></span><br><span class="line"><span class="string">    +   devtool: '</span>source-map,</span><br><span class="line">    +   plugins: [</span><br><span class="line">    +     <span class="keyword">new</span> UglifyJSPlugin(&#123;</span><br><span class="line">    +        sourceMap: <span class="literal">true</span></span><br><span class="line">    +    &#125;),</span><br><span class="line">    +     <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    +        <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify    +     (<span class="string">'produdction)</span></span><br><span class="line"><span class="string">    +      &#125;)</span></span><br><span class="line"><span class="string">    +   ]</span></span><br><span class="line"><span class="string">    + &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NPM Scripts</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "name": "development",</span></span><br><span class="line"><span class="string">        "version": "1.0.0",</span></span><br><span class="line"><span class="string">        "description": "",</span></span><br><span class="line"><span class="string">        "main": "webpack.config.js",</span></span><br><span class="line"><span class="string">        "scripts": &#123;</span></span><br><span class="line"><span class="string">    -     "start": "webpack-dev-server --open",</span></span><br><span class="line"><span class="string">    +     "start": "webpack-dev-server --open --config webpack.dev.js",</span></span><br><span class="line"><span class="string">    -     "build": "webpack"</span></span><br><span class="line"><span class="string">    +     "build": "webpack --config webpack.prod.js"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "keywords": [],</span></span><br><span class="line"><span class="string">        "author": "",</span></span><br><span class="line"><span class="string">        "license": "ISC",</span></span><br><span class="line"><span class="string">        "devDependencies": &#123;</span></span><br><span class="line"><span class="string">        "clean-webpack-plugin": "^0.1.17",</span></span><br><span class="line"><span class="string">        "css-loader": "^0.28.4",</span></span><br><span class="line"><span class="string">        "csv-loader": "^2.1.1",</span></span><br><span class="line"><span class="string">        "express": "^4.15.3",</span></span><br><span class="line"><span class="string">        "file-loader": "^0.11.2",</span></span><br><span class="line"><span class="string">        "html-webpack-plugin": "^2.29.0",</span></span><br><span class="line"><span class="string">        "style-loader": "^0.18.2",</span></span><br><span class="line"><span class="string">        "webpack": "^3.0.0",</span></span><br><span class="line"><span class="string">        "webpack-dev-middleware": "^1.12.0",</span></span><br><span class="line"><span class="string">        "webpack-dev-server": "^2.9.1",</span></span><br><span class="line"><span class="string">        "webpack-merge": "^4.1.0",</span></span><br><span class="line"><span class="string">        "xml-loader": "^1.2.1"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="其他功能：Split-CSS"><a href="#其他功能：Split-CSS" class="headerlink" title="其他功能：Split CSS"></a>其他功能：Split CSS</h1><ol><li>安装: <code>npm install --save-dev extract-text-webpack-plugin</code></li><li><p>配置:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">            fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">            use: <span class="string">"css-loader"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式概述</title>
      <link href="/2017/04/25/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E8%BF%B0/"/>
      <url>/2017/04/25/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>全部代码：<a href="https://github.com/renhongl/front-end-demo/tree/master/demo-design-pattern" target="_blank" rel="noopener">点击这里</a>。</p><p>设计模式的主题总是把不变的事物和变化的事物分离开来。</p><a id="more"></a><h2 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h2><p>如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态的思想是把“做什么”和“谁去做”分离开来。</p><p>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p><p>多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，<br>你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装的目的是将信息影藏。</p><p>一般而言，封装是指封装数据和封装实现。</p><p>更广义的封装，还包括封装类型和封装变化。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>作为对象的方法调用</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    getA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === obj);<span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getA();</span><br></pre></td></tr></table></figure><p>作为普通函数调用</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = <span class="string">'global'</span>;</span><br><span class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getName());<span class="comment">//global</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'global'</span>;</span><br><span class="line"><span class="keyword">let</span> myObj = &#123;</span><br><span class="line">    name: <span class="string">'renhong'</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getName = myObj.getName;<span class="comment">//普通函数调用</span></span><br><span class="line"><span class="built_in">console</span>.log(getName());<span class="comment">//global</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObj.getName());<span class="comment">//renhong, 对象的方法调用</span></span><br></pre></td></tr></table></figure><p>构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> MyClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'renhong'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">//renhong</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> MyClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'renhong'</span>,</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">'mogu'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">//mogu</span></span><br></pre></td></tr></table></figure><p>call和apply调用。用于动态的改变传入函数的this。</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'renhong'</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">'mogu'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1.getName());<span class="comment">//renhong</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.getName.call(obj2));<span class="comment">//mogu</span></span><br></pre></td></tr></table></figure><h2 id="call和apply"><a href="#call和apply" class="headerlink" title="call和apply"></a>call和apply</h2><p>作用一模一样，区别只在于传入参数的形式不同。</p><p>apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([a, b, c]);<span class="comment">//[1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line">func.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([a, b, c]);<span class="comment">//[1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line">func.call(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>为什么要使用call和apply？</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变this指向</span></span><br><span class="line"><span class="comment">//---------例子1</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'renhong'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">'mogu'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'window'</span>;</span><br><span class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">getName();<span class="comment">//window</span></span><br><span class="line">getName.call(obj1);<span class="comment">//renhong</span></span><br><span class="line">getName.call(obj2);<span class="comment">//mogu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------例子2</span></span><br><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);<span class="comment">//div1</span></span><br><span class="line">    func();<span class="comment">//undefined，指向window</span></span><br><span class="line">    func.call(<span class="keyword">this</span>);<span class="comment">//div1，指向这个this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------例子3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> type = <span class="string">'dialog'</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'controller'</span>;</span><br><span class="line">        renderControl();</span><br><span class="line">        handleEvents.call(<span class="keyword">this</span>);</span><br><span class="line">        renderDialog.call(<span class="keyword">this</span>, type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderControl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);<span class="comment">//undefined，this指向window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvents</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);<span class="comment">//controller</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderDialog</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(type);<span class="comment">//dialog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//借用其他对象的方法</span></span><br><span class="line"><span class="comment">//类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);<span class="comment">//[1, 2, 3]</span></span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。</p><p>局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。</p><p>跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。</p><p><strong>注：</strong> 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。</p><h2 id="函数柯里化（function-currying）"><a href="#函数柯里化（function-currying）" class="headerlink" title="函数柯里化（function currying）"></a>函数柯里化（function currying）</h2><p>currying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p><h2 id="Uncurrying"><a href="#Uncurrying" class="headerlink" title="Uncurrying"></a>Uncurrying</h2><p>当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。</p><p>同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。</p><h2 id="节流、防抖"><a href="#节流、防抖" class="headerlink" title="节流、防抖"></a>节流、防抖</h2><p>在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。</p><p>例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。</p><p>以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">throttling</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = throttling(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'resized'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'resized'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript标准参考教程重点</title>
      <link href="/2017/02/04/Javascript%E6%A0%87%E5%87%86%E5%8F%82%E8%80%83%E6%95%99%E7%A8%8B%E9%87%8D%E7%82%B9/"/>
      <url>/2017/02/04/Javascript%E6%A0%87%E5%87%86%E5%8F%82%E8%80%83%E6%95%99%E7%A8%8B%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>记一些容易忘记的语法。</p><a id="more"></a><h1 id="标签-label-用法"><a href="#标签-label-用法" class="headerlink" title="标签(label)用法"></a>标签(label)用法</h1>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断数组二中是否有数组一中的元素</span></span><br><span class="line"><span class="keyword">var</span> itHas = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">var</span> item = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'zhagnsanfeng'</span>, <span class="string">'sunwukong'</span>, <span class="string">'zhubajie'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'liangrenhong'</span>, <span class="string">'zhubajie'</span>, <span class="string">'xiaofeng'</span>];</span><br><span class="line">verify:</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len1 = arr1.length; i &lt; len1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>, len2 = arr2.length; j &lt; len2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr1[i] === arr2[j]) &#123;</span><br><span class="line">                itHas = <span class="literal">true</span>;</span><br><span class="line">                index = j;</span><br><span class="line">                item = arr2[j];</span><br><span class="line">                <span class="keyword">break</span> verify;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(itHas, index, item);</span><br></pre></td></tr></table></figure><p>当查找到一个符合的之后，就退出循环，这样可以节省时间。<br>如果在break之后不使用标签，只能跳出内层循环。</p><h1 id="for…in遍历对象属性"><a href="#for…in遍历对象属性" class="headerlink" title="for…in遍历对象属性"></a>for…in遍历对象属性</h1>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'lrh'</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="string">'18'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.gender = <span class="string">'boy'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//name</span></span><br><span class="line"><span class="comment">//age</span></span><br><span class="line"><span class="comment">//gender</span></span><br></pre></td></tr></table></figure><p>使用for…in遍历会遍历出实例自身的属性以及继承的属性。<br>如果非要用for…in那就在遍历时加上hasOwnProperty方法判断：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'lrh'</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="string">'18'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.gender = <span class="string">'boy'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="keyword">if</span>(person.hasOwnProperty(p)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//name</span></span><br><span class="line"><span class="comment">//age</span></span><br></pre></td></tr></table></figure><h1 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h1><p>用于检测对象是否包含某个属性</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'lrh'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> person;<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>定义在一个函数内部的函数。</li><li>将函数内部与函数外部连接起来的一座桥梁。</li><li>可以读取函数内部的变量。</li><li><p>让函数内部变量一直保持在内存中。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(number++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = count(<span class="number">5</span>);</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br></pre></td></tr></table></figure></li><li><p>封装对象的私有属性和私有方法。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setGender</span>(<span class="params">gender</span>) </span>&#123;</span><br><span class="line">        _gender = gender</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getGender</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        getGender: getGender,</span><br><span class="line">        setGender: setGender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lrh'</span>);</span><br><span class="line">p1.setGender(<span class="string">'boy'</span>);</span><br><span class="line">p1.getGender();<span class="comment">//boy</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>map方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。<br>map方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。<br>map方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。</p><p>forEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。<br>forEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。</p><p>filter方法返回结构为true的成员。</p><p>some方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。</p><p>every方法，每个数组成员的返回值是true，every方法才会返回true。</p><p>reduce方法，依次处理数组的每个成员，最终累计成一个值。</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>substring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。</p><p>如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。</p><p>如果参数是负数，substring方法会自动将负数转为0。</p><h1 id="对象的拷贝-浅拷贝"><a href="#对象的拷贝-浅拷贝" class="headerlink" title="对象的拷贝-浅拷贝"></a>对象的拷贝-浅拷贝</h1><p>确保拷贝后的对象，与原对象具有同样的prototype原型对象。<br>确保拷贝后的对象，与原对象具有同样的属性。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObject</span>(<span class="params">orig</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(orig));</span><br><span class="line">    copyOwnPropertiesFrom(copy, orig);</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyOwnPropertiesFrom</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span></span><br><span class="line">        .getOwnPropertyNames(source)</span><br><span class="line">        .forEach(<span class="function"><span class="keyword">function</span>(<span class="params">propKey</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(source, propKey);</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(target, propKey, desc);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱听播放器</title>
      <link href="/2017/01/21/%E7%88%B1%E5%90%AC%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>/2017/01/21/%E7%88%B1%E5%90%AC%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/aiting1.png" alt="AiTing"></p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一个简洁、好看、功能丰富的歌曲，书籍播放器。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>可以直接下载我打包好的windows版本： <a href="http://www.demodashi.com/demo/12542.html" target="_blank" rel="noopener">点击这里下载免安装版爱听播放器</a>, <a href="https://github.com/renhongl/AiTing" target="_blank" rel="noopener">Github点赞</a>。</p><h1 id="自己打包"><a href="#自己打包" class="headerlink" title="自己打包"></a>自己打包</h1><ul><li><p>运行<code>npm install</code>安装依赖。</p></li><li><p>依赖中没有包含打包工具，可以使用<code>npm install electron-packager -g</code>，在全局安装打包模块。</p></li><li>使用终端进入根目录，运行<code>npm run package</code>。</li><li>接着在根目录会生成<strong>AiTing-win32-x64</strong>文件，进入此目录，双击<strong>AiTing.exe</strong>即可运行此软件。</li></ul><h1 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h1><p>本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。</p><h2 id="音乐播放"><a href="#音乐播放" class="headerlink" title="音乐播放"></a>音乐播放</h2><p><img src="/images/aiting3.png" alt="AiTing"></p><p>这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。</p><p><img src="/images/aiting2.png" alt="AiTing"></p><p>这是音乐搜索结果界面。</p><p><img src="/images/aiting4.png" alt="AiTing"></p><p>这是歌词界面。</p><h2 id="书籍播放"><a href="#书籍播放" class="headerlink" title="书籍播放"></a>书籍播放</h2><p><img src="/images/aiting5.png" alt="AiTing"></p><p>这是书籍的推荐页面。</p><p><img src="/images/aiting6.png" alt="AiTing"></p><p>这是书籍搜索结果界面。</p><p><img src="/images/aiting7.png" alt="AiTing"></p><p>由于书籍章节的搜索很慢，所以使用分页显示的方式。</p><h1 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h1><p>Javascript, Electron, Webpack, React.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 作品 </tag>
            
            <tag> React </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS刷票程序</title>
      <link href="/2017/01/08/NodeJS%E5%88%B7%E7%A5%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/2017/01/08/NodeJS%E5%88%B7%E7%A5%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/buyTicket.jpg" alt="buy_ticket"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>假设已经安装了node环境，从github上clone下源代码（<a href="https://github.com/renhongl/Buy_Ticket" target="_blank" rel="noopener">源码在这</a>）</p><p>运行<code>npm install</code>安装依赖</p><p>双击run.bat即可</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>控制台每隔30秒打印最新票量信息，如果没有票，显示 <strong>No data found</strong>，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。</p><h1 id="发送短信的代码："><a href="#发送短信的代码：" class="headerlink" title="发送短信的代码："></a>发送短信的代码：</h1>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> App = <span class="built_in">require</span>(<span class="string">'alidayu-node'</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> App(<span class="string">'App Key'</span>, <span class="string">'App Secret'</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> message = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">       <span class="string">"name"</span>: <span class="string">"lrh"</span>,</span><br><span class="line">       <span class="string">"trainName"</span>: <span class="string">'D5154'</span>,</span><br><span class="line">       <span class="string">"number"</span>: <span class="string">'2'</span></span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> smsOptions = &#123;</span><br><span class="line">       sms_free_sign_name: <span class="string">'提示信息'</span>,</span><br><span class="line">       sms_param: message,</span><br><span class="line">       rec_num: <span class="string">'81193903'</span>,</span><br><span class="line">       sms_template_code: <span class="string">'SMS_39010188'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   app.smsSend(options);</span><br></pre></td></tr></table></figure><p>这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取<strong>App Key</strong>和 <strong>App Secret</strong>，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作品 </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB安装</title>
      <link href="/2017/01/05/MongoDB%E5%AE%89%E8%A3%85/"/>
      <url>/2017/01/05/MongoDB%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>记录一些和Mongo DB有关的笔记（部分修改自runoob）。</p><a id="more"></a><h1 id="安装Mongo后的基本配置"><a href="#安装Mongo后的基本配置" class="headerlink" title="安装Mongo后的基本配置"></a>安装Mongo后的基本配置</h1><p>MongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\ 或者 D:\ 等 )。<br>在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c:\&gt;<span class="built_in">cd</span> c:\</span><br><span class="line"></span><br><span class="line">c:\&gt;mkdir data</span><br><span class="line"></span><br><span class="line">c:\&gt;<span class="built_in">cd</span> data</span><br><span class="line"></span><br><span class="line">c:\data&gt;mkdir db</span><br><span class="line"></span><br><span class="line">c:\data&gt;<span class="built_in">cd</span> db</span><br><span class="line"></span><br><span class="line">c:\data\db&gt;</span><br></pre></td></tr></table></figure><p>也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。</p><p>为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --dbpath c:\data\db</span><br></pre></td></tr></table></figure><p>如果执行成功，会输出如下信息：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not</span><br><span class="line">installed, will zero-out data files</span><br><span class="line">2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\data\db\j</span><br><span class="line">ournal</span><br><span class="line">2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil</span><br><span class="line">es present, no recovery needed</span><br><span class="line">2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started</span><br><span class="line">2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2</span><br><span class="line">488 port=27017 dbpath=c:\data\db 64-bit host=WIN-1VONBJOCE88</span><br><span class="line">2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W</span><br><span class="line">indows Server 2008 R2</span><br><span class="line">2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h1 id="将MongoDB作为服务启动"><a href="#将MongoDB作为服务启动" class="headerlink" title="将MongoDB作为服务启动"></a>将MongoDB作为服务启动</h1><p>请注意，必须有<strong>管理权限</strong>才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --bind_ip 127.0.0.1 --logpath C:\data\dbConf\mongodb.log --logappend --dbpath </span><br><span class="line">C:\data\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install</span><br></pre></td></tr></table></figure><p>参数说明：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</span><br><span class="line">--logpath定MongoDB日志文件，注意是指定文件不是目录</span><br><span class="line">--logappend使用追加的方式写日志</span><br><span class="line">--dbpath指定数据库路径</span><br><span class="line">--port指定服务端口号，默认端口27017</span><br><span class="line">--serviceName指定服务名称</span><br><span class="line">--serviceDisplayName指定服务名称，有多个mongodb服务时执行。</span><br><span class="line">--install指定作为一个Windows服务安装。</span><br></pre></td></tr></table></figure><p>再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。</p><p>安装完之后，继续运行：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mongo (mongo是刚才的服务名称)</span><br></pre></td></tr></table></figure><p>如果出现类似<strong>启动服务成功</strong>的提示，那么就完成了；如果出现<strong>没有此服务</strong>的提示，那就是没有安装成功，需要检查以上步骤。</p><h1 id="MongoDB后台管理-Shell"><a href="#MongoDB后台管理-Shell" class="headerlink" title="MongoDB后台管理 Shell"></a>MongoDB后台管理 Shell</h1><p>安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入<code>mongo</code>即可连接。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用SSH提交代码</title>
      <link href="/2016/12/14/Git%E4%BD%BF%E7%94%A8SSH%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81/"/>
      <url>/2016/12/14/Git%E4%BD%BF%E7%94%A8SSH%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。</p><a id="more"></a><ul><li>配置全局用户名和邮箱：<ul><li><code>git config --global user.name &quot;renhongl&quot;</code></li><li><code>git config --global user.email &quot;1075220132@qq.com&quot;</code></li></ul></li><li>先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。</li><li>在~路径下生成新的ssh key:<ul><li><code>ssh-keygen -t rsa -C &quot;1075220132@qq.com&quot;</code></li></ul></li><li>三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。</li><li>测试ssh key是否配置成功：<ul><li><code>$ ssh -T git@github.com</code></li></ul></li><li>然后输入yes,如果出现 “Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.”就表示配置好了。</li><li>配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具推荐</title>
      <link href="/2016/12/07/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
      <url>/2016/12/07/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>分享一些好用的Windows工具。</p><h1 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h1><p>我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。</p><a id="more"></a><p>很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。</p><h1 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h1><p>这是内网穿透工具，比如在本地启动一个服务器 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。</p><p>如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。</p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。</p><h1 id="Cmder"><a href="#Cmder" class="headerlink" title="Cmder"></a>Cmder</h1><p>Windows下非常好用的Linux终端。干净，漂亮，易于使用。</p><h1 id="MarkdownPad2"><a href="#MarkdownPad2" class="headerlink" title="MarkdownPad2"></a>MarkdownPad2</h1><p>Windows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑远程控制工具</title>
      <link href="/2016/12/04/%E7%94%B5%E8%84%91%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
      <url>/2016/12/04/%E7%94%B5%E8%84%91%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。</p><a id="more"></a><h1 id="图文介绍"><a href="#图文介绍" class="headerlink" title="图文介绍"></a>图文介绍</h1><p>通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。</p><p><img src="/images/pc2.png" alt="ap"></p><p><img src="/images/pc1.png" alt="ap"></p><p>源代码地址（<a href="https://github.com/renhongl/PCControl" target="_blank" rel="noopener">点这里</a>） ，自己玩玩就好了。。别去偷看别人的隐私。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作品 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用平台WEB</title>
      <link href="/2016/11/24/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0WEB/"/>
      <url>/2016/11/24/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0WEB/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/homeAndRoom.png" alt="ap"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。</p><a id="more"></a><p>应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：<a href="http://www.demodashi.com/demo/12539.html" target="_blank" rel="noopener">源码</a>，<a href="https://github.com/renhongl/ailiao" target="_blank" rel="noopener">github点赞</a>。</p><h1 id="图文介绍"><a href="#图文介绍" class="headerlink" title="图文介绍"></a>图文介绍</h1><p><img src="/images/signIn.png" alt="ap"></p><p>这是登录页面，可以使用用户名和验证了的邮箱登录。</p><p><img src="/images/signUp.png" alt="ap"></p><p>这是注册页面，很简单的注册一下。 </p><p><img src="/images/resetPwd.png" alt="ap"></p><p>这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。</p><p><img src="/images/chatHome.png" alt="ap"></p><p>这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。</p><p><img src="/images/homeAndRoom.png" alt="ap"></p><p>图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。</p><p><img src="/images/docs.png" alt="ap"></p><p>这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。</p><h1 id="后端部分代码介绍"><a href="#后端部分代码介绍" class="headerlink" title="后端部分代码介绍"></a>后端部分代码介绍</h1><h2 id="Email-js"><a href="#Email-js" class="headerlink" title="Email.js"></a>Email.js</h2><p>用于发送邮件</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> 'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">'nodemailer'</span>);</span><br><span class="line"><span class="keyword">const</span> Config = <span class="built_in">require</span>(<span class="string">'./Config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(to, subject, text, html) &#123;</span><br><span class="line"><span class="keyword">this</span>.config = &#123;</span><br><span class="line">service: <span class="string">'126'</span>,</span><br><span class="line">auth: &#123;</span><br><span class="line">user: Config.EMAIL_SERVER,</span><br><span class="line">pass: Config.EMAIL_PWD            </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.mailOptions = &#123;</span><br><span class="line"><span class="keyword">from</span>: Config.EMAIL_SERVER,</span><br><span class="line">to: to,</span><br><span class="line">subject: subject,</span><br><span class="line">text: text,</span><br><span class="line"><span class="comment">//html: html</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>._send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_send() &#123;</span><br><span class="line"><span class="keyword">let</span> transporter = nodemailer.createTransport(<span class="keyword">this</span>.config);</span><br><span class="line">transporter.sendMail(<span class="keyword">this</span>.mailOptions, <span class="function"><span class="keyword">function</span> (<span class="params">error, info</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Message sent: '</span> + info.response);</span><br><span class="line">transporter.close();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Email;</span><br></pre></td></tr></table></figure><h2 id="Server-js"><a href="#Server-js" class="headerlink" title="Server.js"></a>Server.js</h2><p>作为服务器，并且是Websocket的父类。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> 'use strict'</span>;</span><br><span class="line"> <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"> <span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"> <span class="keyword">const</span> socket = <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line"> <span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'./Router'</span>);</span><br><span class="line"> <span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Server</span></span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>(port)&#123;</span><br><span class="line">       <span class="keyword">this</span>.port = port;</span><br><span class="line">       <span class="keyword">this</span>.app = express();</span><br><span class="line">       <span class="keyword">this</span>.server = http.createServer(<span class="keyword">this</span>.app);</span><br><span class="line">       <span class="keyword">this</span>.io = socket.listen(<span class="keyword">this</span>.server);</span><br><span class="line">       <span class="keyword">this</span>._run();</span><br><span class="line">     &#125;</span><br><span class="line">   _run()&#123;</span><br><span class="line">       <span class="keyword">this</span>.server.listen(<span class="keyword">this</span>.port);</span><br><span class="line">       <span class="keyword">this</span>.app.use(bodyParser.json());</span><br><span class="line">       <span class="keyword">this</span>.app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">       <span class="keyword">this</span>.app.use(express.static(__dirname.replace(<span class="regexp">/server\\core/</span>, <span class="string">'app'</span>)));</span><br><span class="line">       <span class="keyword">new</span> Router(<span class="keyword">this</span>.app);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'HTTP listening: 127.0.0.1:'</span> + <span class="keyword">this</span>.port);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Server;</span><br></pre></td></tr></table></figure><h2 id="User-js"><a href="#User-js" class="headerlink" title="User.js"></a>User.js</h2><p>和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">_getCode()&#123;</span><br><span class="line">  <span class="keyword">this</span>.app.get(<span class="string">'/getCode'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> email = req.query.email;</span><br><span class="line">    <span class="keyword">let</span> code = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">      code += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> queryData = &#123;</span><br><span class="line">      email: email</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> updateData = &#123;</span><br><span class="line">      code: code</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> callback = <span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> collection = db.collection(<span class="keyword">this</span>.userCollection);</span><br><span class="line">      collection.updateOne(queryData, &#123;<span class="attr">$set</span>: updateData&#125;, (err, result) =&gt; &#123;</span><br><span class="line">        assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">        db.close();</span><br><span class="line">        <span class="keyword">if</span>(result.result.n === <span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">new</span> Email(email, <span class="string">'重置密码'</span>, <span class="string">'你的验证码是：'</span> + code);</span><br><span class="line">          <span class="keyword">this</span>._removeCode(email);</span><br><span class="line">          res.send(&#123;<span class="attr">status</span>: <span class="string">'success'</span>, <span class="attr">text</span>: <span class="string">'验证码已发往你的邮箱，请查收。30分钟内有效。'</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.send(&#123;<span class="attr">status</span>: <span class="string">'error'</span>, <span class="attr">text</span>: <span class="string">'没有此邮箱，或许你需要注册账号。'</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">new</span> MongoDB(<span class="keyword">this</span>.currentDB, callback);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前端部分代码介绍"><a href="#前端部分代码介绍" class="headerlink" title="前端部分代码介绍"></a>前端部分代码介绍</h1><p>前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">QueryString</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">      <span class="keyword">let</span> search = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>).split(<span class="string">'&amp;'</span>);</span><br><span class="line">      <span class="keyword">let</span> tempGroup = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> search) &#123;</span><br><span class="line">        tempGroup.push(p.split(<span class="string">'='</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.params = <span class="keyword">new</span> <span class="built_in">Map</span>(tempGroup);</span><br><span class="line">    &#125;</span><br><span class="line">    getValue(name)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.params.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> queryString = <span class="keyword">new</span> QueryString();</span><br><span class="line">  <span class="keyword">return</span> queryString;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Draggable-js"><a href="#Draggable-js" class="headerlink" title="Draggable.js"></a>Draggable.js</h2><p>用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Draggable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>($container) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$container = $container;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> subContainer <span class="keyword">of</span> $container.children()) &#123;</span><br><span class="line">        <span class="keyword">this</span>._handleEvents($(subContainer));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _handleEvents($subContainer) &#123;</span><br><span class="line">      $subContainer.on(<span class="string">'mousedown'</span>, (e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$(e.target).hasClass(<span class="string">'button'</span>)) &#123;</span><br><span class="line">          <span class="keyword">this</span>._handleMousedown(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      $(<span class="built_in">document</span>).on(<span class="string">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$(e.target).hasClass(<span class="string">'button'</span>)) &#123;</span><br><span class="line">          <span class="keyword">this</span>._handleMousemove(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      $(<span class="built_in">document</span>).on(<span class="string">'mouseup'</span>, (e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$(e.target).hasClass(<span class="string">'button'</span>)) &#123;</span><br><span class="line">          <span class="keyword">this</span>._handleMouseup(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _handleMousedown(e) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;left, top&#125; = <span class="keyword">this</span>.$container.css([<span class="string">'left'</span>, <span class="string">'top'</span>]);</span><br><span class="line">      <span class="keyword">this</span>.offsetX = <span class="keyword">this</span>._parseStr(left) - e.clientX;</span><br><span class="line">      <span class="keyword">this</span>.offsetY = <span class="keyword">this</span>._parseStr(top) - e.clientY;</span><br><span class="line">      <span class="keyword">this</span>.mouseDown = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _handleMousemove(e) &#123;</span><br><span class="line">      $(e.target).css(<span class="string">'cursor'</span>, <span class="string">'url(/images/m1.cur),default !important'</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mouseDown) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = e.clientX;</span><br><span class="line">        <span class="keyword">let</span> y = e.clientY;</span><br><span class="line">        <span class="keyword">let</span> positionX = x + <span class="keyword">this</span>.offsetX;</span><br><span class="line">        <span class="keyword">let</span> positionY = y + <span class="keyword">this</span>.offsetY;</span><br><span class="line">        <span class="keyword">this</span>.$container.css(&#123;</span><br><span class="line">          left: positionX,</span><br><span class="line">          top: positionY,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _handleMouseup(e) &#123;</span><br><span class="line">      $(e.target).css(<span class="string">'cursor'</span>, <span class="string">'url(/images/m1.cur),default !important'</span>);</span><br><span class="line">      <span class="keyword">this</span>.mouseDown = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _parseStr(str) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> str !== <span class="string">'string'</span>)&#123;</span><br><span class="line">        str += <span class="string">''</span>; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Number</span>(str.split(<span class="string">'px'</span>)[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> Draggable;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Rain-js"><a href="#Rain-js" class="headerlink" title="Rain.js"></a>Rain.js</h2><p>用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Rain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="keyword">this</span>.settings = &#123;</span><br><span class="line">        width: <span class="number">10</span>,</span><br><span class="line">        height: <span class="number">10</span>,</span><br><span class="line">        borderColor: <span class="string">'#c6cac9'</span>,</span><br><span class="line">        opacity: <span class="number">0.7</span>,</span><br><span class="line">        borderRadius: <span class="number">5</span>,</span><br><span class="line">        borderWidth: <span class="number">5</span>,</span><br><span class="line">        maxWidth: <span class="number">70</span>,</span><br><span class="line">        widthOffset: <span class="number">2</span>,</span><br><span class="line">        radiusOffset: <span class="number">1</span>,</span><br><span class="line">        opacityOffset: <span class="number">0.05</span>,</span><br><span class="line">        borderOffset: <span class="number">1</span>,</span><br><span class="line">        position: <span class="string">'fixed'</span>,</span><br><span class="line">        zIndex: <span class="number">100</span>,</span><br><span class="line">        borderStyle: <span class="string">'solid'</span>,</span><br><span class="line">        class: 'rain',</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>._handleEvents();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _handleEvents() &#123;</span><br><span class="line">      <span class="keyword">let</span> settings = <span class="keyword">this</span>.settings;</span><br><span class="line">      $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, (e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>($(e.target).hasClass(<span class="string">'button'</span>))&#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> $rain = $(<span class="string">'&lt;div&gt;'</span>).attr(<span class="string">'class'</span>, settings.class).css(&#123;</span><br><span class="line">          position: settings.position,</span><br><span class="line">          zIndex: settings.zIndex,</span><br><span class="line">          borderStyle: settings.borderStyle,</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">'body'</span>).append($rain);</span><br><span class="line">        <span class="keyword">let</span> x = e.clientX;</span><br><span class="line">        <span class="keyword">let</span> y = e.clientY;</span><br><span class="line">        <span class="keyword">this</span>._initRain($rain, x, y);</span><br><span class="line">        <span class="keyword">this</span>._updateRain($rain, x, y);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _updateRain($rain, x, y) &#123;</span><br><span class="line">      <span class="keyword">let</span> settings = <span class="keyword">this</span>.settings;</span><br><span class="line">      <span class="keyword">let</span> rainThread = setInterval( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;width, height,top, left, opacity, borderWidth, borderRadius&#125; = $rain.css([<span class="string">'width'</span>, <span class="string">'height'</span>,<span class="string">'top'</span>, <span class="string">'left'</span>, <span class="string">'opacity'</span>, <span class="string">'borderWidth'</span>, <span class="string">'borderRadius'</span>]);</span><br><span class="line">        $rain.css(&#123;</span><br><span class="line">          width: <span class="keyword">this</span>._parseStr(width) + settings.widthOffset,</span><br><span class="line">          height: <span class="keyword">this</span>._parseStr(height) + settings.widthOffset,</span><br><span class="line">          top: y - <span class="keyword">this</span>._parseStr(height) / <span class="number">2</span>,</span><br><span class="line">          left: x - <span class="keyword">this</span>._parseStr(width) / <span class="number">2</span>,</span><br><span class="line">          opacity: <span class="keyword">this</span>._parseStr(opacity) - settings.opacityOffset,</span><br><span class="line">          borderWidth: <span class="keyword">this</span>._parseStr(borderWidth) + settings.borderOffset,</span><br><span class="line">          borderRadius: <span class="keyword">this</span>._parseStr(borderRadius) + settings.radiusOffset,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._parseStr(width) &gt; settings.maxWidth) &#123;</span><br><span class="line">          clearInterval(rainThread);</span><br><span class="line">          $rain.remove();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _initRain($rain, x, y) &#123;</span><br><span class="line">      <span class="keyword">let</span> settings = <span class="keyword">this</span>.settings;</span><br><span class="line">      $rain.css(&#123;</span><br><span class="line">        width: settings.width,</span><br><span class="line">        height: settings.height,</span><br><span class="line">        borderColor: settings.borderColor,</span><br><span class="line">        opacity: settings.opacity,</span><br><span class="line">        borderRadius: settings.borderRadius,</span><br><span class="line">        borderWidth: settings.borderWidth,</span><br><span class="line">        top: y - <span class="keyword">this</span>._parseStr(settings.height) / <span class="number">2</span>,</span><br><span class="line">        left: x - <span class="keyword">this</span>._parseStr(settings.width) / <span class="number">2</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _parseStr(str)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> str !== <span class="string">'string'</span>)&#123;</span><br><span class="line">        str += <span class="string">''</span>; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Number</span>(str.split(<span class="string">'px'</span>)[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> Rain;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Message-js"><a href="#Message-js" class="headerlink" title="Message.js"></a>Message.js</h2><p>最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(type, content) &#123;</span><br><span class="line">  <span class="keyword">this</span>.title = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">this</span>.content = content;</span><br><span class="line">  <span class="keyword">this</span>.showTime = <span class="number">5000</span>;</span><br><span class="line">  <span class="keyword">this</span>.clearTime = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">this</span>.clearThread = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.timeThread = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.$Message = $(<span class="string">'&lt;div&gt;'</span>).css(&#123;</span><br><span class="line">    color: <span class="string">'#fff'</span>,</span><br><span class="line">    borderRadius: <span class="number">5</span>,</span><br><span class="line">    width: <span class="number">300</span>,</span><br><span class="line">    display: <span class="string">'none'</span>,</span><br><span class="line">    zIndex: <span class="number">110</span>,</span><br><span class="line">    margin: <span class="string">'2px 5px'</span>,</span><br><span class="line">    clear: <span class="string">'both'</span>,</span><br><span class="line">    float: <span class="string">'right'</span>,</span><br><span class="line">    position: <span class="string">'relative'</span>,</span><br><span class="line">    boxShadow: <span class="string">'0px 0px 10px rgba(255, 255, 255, 1)'</span>,</span><br><span class="line">    opacity: <span class="number">0.9</span>,</span><br><span class="line">  &#125;).addClass(<span class="string">'message'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.$icon = $(<span class="string">'&lt;i&gt;'</span>).css(&#123;</span><br><span class="line">    display: <span class="string">'inline-block'</span>,</span><br><span class="line">    float: <span class="string">'left'</span>,</span><br><span class="line">    marginLeft: <span class="number">10</span>,</span><br><span class="line">    width: <span class="number">20</span>,</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    fontSize: <span class="string">'1.2em'</span>,</span><br><span class="line">  &#125;).addClass(<span class="string">'msgIcon'</span>).appendTo(<span class="keyword">this</span>.$Message);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.$title = $(<span class="string">'&lt;div&gt;'</span>).css(&#123;</span><br><span class="line">    height: <span class="string">'45%'</span>,</span><br><span class="line">    width: <span class="number">260</span>,</span><br><span class="line">    float: <span class="string">'right'</span>,</span><br><span class="line">    fontSize: <span class="string">'1.2em'</span>,</span><br><span class="line">  &#125;).addClass(<span class="string">'msgTitle'</span>).appendTo(<span class="keyword">this</span>.$Message);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.$time = $(<span class="string">'&lt;span&gt;'</span>).css(&#123;</span><br><span class="line">    position: <span class="string">'absolute'</span>,</span><br><span class="line">    top: <span class="number">2</span>,</span><br><span class="line">    right: <span class="number">2</span>,</span><br><span class="line">    fontSize: <span class="string">'0.7em'</span>,</span><br><span class="line">  &#125;).addClass(<span class="string">'msgTime'</span>).appendTo(<span class="keyword">this</span>.$Message);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.$content = $(<span class="string">'&lt;div&gt;'</span>).css(&#123;</span><br><span class="line">    float: <span class="string">'right'</span>,</span><br><span class="line">    height: <span class="string">'56%'</span>,</span><br><span class="line">    width: <span class="number">260</span>,</span><br><span class="line">    paddingBottom: <span class="number">5</span>,</span><br><span class="line">    paddingRight: <span class="number">5</span>,</span><br><span class="line">    fontSize: <span class="string">'0.8em'</span>,</span><br><span class="line">  &#125;).addClass(<span class="string">'msgContent'</span>).appendTo(<span class="keyword">this</span>.$Message);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'infor'</span>:</span><br><span class="line">      <span class="keyword">this</span>.title = <span class="string">'提示'</span>;</span><br><span class="line">      <span class="keyword">this</span>._infor();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'success'</span>:</span><br><span class="line">      <span class="keyword">this</span>.title = <span class="string">'成功'</span>;</span><br><span class="line">      <span class="keyword">this</span>._success();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'error'</span>:</span><br><span class="line">      <span class="keyword">this</span>.title = <span class="string">'错误'</span>;</span><br><span class="line">      <span class="keyword">this</span>._error();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'warning'</span>:</span><br><span class="line">      <span class="keyword">this</span>.title = <span class="string">'警告'</span>;</span><br><span class="line">      <span class="keyword">this</span>._warning();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'message'</span>:</span><br><span class="line">      <span class="keyword">this</span>._message();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 作品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用平台桌面版</title>
      <link href="/2016/11/15/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E7%89%88/"/>
      <url>/2016/11/15/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用web技术开发的应用平台。</p><p>可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：</p><p><img src="/images/applicationPlatform.png" alt="ap"></p><a id="more"></a><p>目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将<br>会详细介绍它们。</p><p>因为我写了一小部分后台，所以运行前需要启动服务器。在下载完<br>源码后，打开一个cmd窗口，进入根目录，运行代码：</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">server</span>.js</span><br></pre></td></tr></table></figure><p>将服务器跑起来。然后再打开一个cmd窗口，运行代码：</p>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> start</span><br></pre></td></tr></table></figure><p>应用就打开了。</p><h1 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h1><p>它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。<br>效果图如下：</p><p><img src="/images/musicPlayer2.png" alt="ap"></p><p>UX方面做得不是很好，以后会更加注重这一块。</p><h1 id="聊天室"><a href="#聊天室" class="headerlink" title="聊天室"></a>聊天室</h1><p>聊天室是我觉得做得比较好的一个，因为它包含了很多功能。<br>除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。<br>里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的<br>位置。效果图如下：</p><p><img src="/images/chatRoom2.png" alt="ap"></p><h1 id="爱心鱼"><a href="#爱心鱼" class="headerlink" title="爱心鱼"></a>爱心鱼</h1><p>最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。<br>效果图如下：</p><p><img src="/images/loveFish.png" alt="ap"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 作品 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
